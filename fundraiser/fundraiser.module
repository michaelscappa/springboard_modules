<?php

define('FUNDRAISER_SINGLE_DONATION_TYPE',  'donation');
define('FUNDRAISER_RECURRING_DONATION_TYPE',  'recurring_donation');
define('FUNDRAISER_DONATION_REFUND_TYPE',  'refund');
define('RECURRING_DONATION_STATUS', 'pending_future_payment');

define('DONATION_NON_RECURRING', 0);
define('DONATION_RECURRING', 1);
define('DONATION_CANCELLED', 2);
require_once('fundraiser.fields.inc');

/**
 * Implementation of hook_cron().
 */
function fundraiser_cron() {
  // Bail on normal cron run if standalone cron is enabled.
  if (variable_get('fundraiser_standalone_cron_enabled', FALSE)) {
    // If standalone cron is enabled, do nothing.
    return 0;
  }
  else {
    watchdog('fundraiser_cron', t('Standard cron run.'));
    _fundraiser_cron_process();
  }
}

/**
 * Menu callback for the standalone cron.
 */
function fundraiser_standalone_cron() {
  if (variable_get('fundraiser_standalone_cron_enabled', FALSE)) {
    // Process the queue.
    watchdog('fundraiser_cron', t('Standalone cron run.'));
    _fundraiser_cron_process();
  }
}

/**
 * Access callback for the standalone cron.
 */
function fundraiser_standalone_cron_access() {
  // Check whether the standalone cron is enabled. If so, then grant access
  // without checking user_access (equivalent to access callback => TRUE).
  return variable_get('fundraiser_standalone_cron_enabled', FALSE);
}

/**
 * Process calls to normal cron and standalone cron.
 */
function _fundraiser_cron_process() {
  if (fundraiser_processor_key_match()) {
    fundraiser_process_recurring_donations();
  }
  else {
    $message = t('The fundraiser sustainer key has not been configured correctly. Recurring donations will not be processed.');
    drupal_set_message($message, 'warning');
    watchdog('fundraiser', $message, NULL, WATCHDOG_CRITICAL);
  }
}

/**
 * Implementation of hook_perm().
 */
function fundraiser_perm() {
  return array(
    'administer fundraiser',
    'create donation form',
    'edit own donation form',
    'edit any donation form',
    'delete own donation form',
    'delete any donation form',
    'clone donation form',
    'cancel future donations',
    'edit donation form user mapping',
    'manage own recurring donations',
  );
}

/**
 * Implements hook_menu().
 */
function fundraiser_menu() {

	$items['admin/settings/fundraiser'] = array(
		'title' => 'Fundraiser settings',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('fundraiser_admin_settings'),
		'access arguments' => array("administer fundraiser"),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'fundraiser.admin.inc',
	);
	
	$items['admin/store/reports/fundraiser'] = array(
		'title' => t('Donation report'),
		'page callback' => 'fundraiser_monthly_report',
		'access arguments' => array('view store reports'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'fundraiser.admin.inc',
	);
	
	$items['node/%webform_menu/webform/mapping'] = array(
	    'title' => t('User map'),
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('fundraiser_mapping_form', 1),
	    'access callback' => 'fundraiser_mapping_form_access',
	    'access arguments' => array(1),
	    'file' => 'fundraiser_components.inc',
	    'weight' => 30,
	    'type' => MENU_LOCAL_TASK,
	);
	
	$items['node/%webform_menu/webform/confirmations'] = array(
	 'title' => t('Confirmations'),
	 'page callback' => 'drupal_get_form',
	 'page arguments' => array('fundraiser_confirmation_settings_form', 1),
	 'access callback' => 'fundraiser_confirmations_perm',
	 'access arguments' => array('update', 1),
	 'file' => 'fundraiser.admin.inc',
	 'type' => MENU_LOCAL_TASK,
	 'weight' => 1,
	);

  $items['fundraiser/js/%fundraiser_ahah_field'] = array(
    'page callback'    => '_fundraiser_ahah_helper_render',
    'page arguments'   => array(2),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );

	$items['fundraiser_ask/js'] = array(
	  'page callback' => '_fundraiser_ask_ahah',
	  'access callback' => TRUE,
	  'type' => MENU_CALLBACK,
	);

	$items['fundraiser_changestate/js'] = array(
		'page callback' => 'fundraiser_changestate',
	    'type' => MENU_CALLBACK,
	    'access arguments' => array("access content"),
	);
	
  $items['fundraiser_cron'] = array(
    'page callback' => 'fundraiser_standalone_cron',
    'access callback' => 'fundraiser_standalone_cron_access',
    'type' => MENU_CALLBACK,
  );

	$items['zones/js'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'fundraiser_zones_ahah_render',
    'access callback' => TRUE,
  );
	
	$items['admin/fundraiser/recurring'] = array(
		'title' => 'Current Fundraiser Recurring Payments',
	    'page callback' => 'fundraiser_recurring_admin',
	    'access callback' => 'node_access',
	    'access arguments' => array('update', 1),
	    'file' => 'fundraiser_components.inc',
	    'weight' => 2,
	    'type' => MENU_CALLBACK,
	);
	
	$items['admin/fundraiser/recurring/test'] = array(
		'title' => 'Fundraiser Recurring Payment Tester',
	    'page callback' => 'fundraiser_recurring_test',
	    'access callback' => 'node_access',
	    'access arguments' => array('update', 1),
	    'file' => 'fundraiser_components.inc',
	    'weight' => 2,
	    'type' => MENU_CALLBACK,
		);
	
  $items['admin/store/orders/%uc_order/recurring/edit'] = array(
    'title' => 'Edit Recurring Donations',
    'page callback' => 'fundraiser_recurring_edit_forms',
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'fundraiser_components.inc',
    'weight' => 2,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/store/orders/%uc_order/refund'] = array(
    'title' => 'Refund',
		'page callback' => 'fundraiser_show_refund_form',
		'page arguments' => array(3),
    'access arguments' => array('edit orders'),
    'file' => 'fundraiser_billing.inc',
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );

	/*
	$items['user/%user/recurring/edit/%uc_order'] = array(
		'title' => 'My Recurring Payments',
		'page callback' => 'fundraiser_recurring_user_edit_forms',
    'access callback' => user_access('edit own recurring payments'),
    'file' => 'fundraiser_sustainer.inc',
    'page arguments' => array(arg(1), 'shithead'),
    'weight' => 2,
    'type' => MENU_CALLBACK,
	);
	*/
	$items['user/%user/recurring_overview'] = array(
		'title' => 'My Recurring Payments',
    'page callback' => 'fundraiser_recurring_user_overview',
    'access callback' => 'fundraiser_user_has_recurring_orders',
    'access arguments' => array(1),
    'page arguments' => array(1),
    'file' => 'fundraiser.sustainer.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
	);
	
	$items['user/%user/recurring_overview/%'] = array(
		'title' => 'My Recurring Payments',
    'page callback' => 'fundraiser_recurring_user_edit_forms',
    'access callback' => 'fundraiser_user_has_recurring_orders',
    'access arguments' => array(1),
    'page arguments' => array(1, 3),
    'file' => 'fundraiser.sustainer.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
	);
	
	$items['admin/store/orders/%uc_order/recurring/overview'] = array(
    'title' => 'Recurring Info',
    'page callback' => 'fundraiser_recurring_master_order_overview',
    'access arguments' => array('view all orders'),
    'access callback' => 'fundraiser_recurring_check_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 11,
    'file' => 'fundraiser_components.inc',
  );

	$items['admin/content/donation-forms'] = array(
		'title' => 'Donation Forms',
		'page callback' => 'fundraiser_donation_form_list',
		'access arguments' => array('create donation form'),
		'type' => MENU_NORMAL_ITEM,
		'weight' => 20,
		'file' => 'fundraiser.admin.inc',
	);
	
	$items['admin/content/clone-form/%'] = array(
		'title' => 'Clone donation form',
		'page callback' => 'fundraiser_clone_donation_form',
		'page arguments' => array(3),
		'access arguments' => array('create donation forms'),
		'type' => MENU_CALLBACK,
		'file' => 'fundraiser.admin.inc',
	);

	$items['node/%webform_menu/confirmation'] = array(
    'title' => 'Webform submission',
    'load arguments' => array(1),
    'page callback' => 'fundraiser_donation_confirmation',
    'page arguments' => array(1),
    'access callback' => 'fundraiser_access_confirmation',
    'type' => MENU_CALLBACK,
  );
  
  $items['node/%node/clone_form'] = array(
    'title' => 'Clone',
    'description' => 'Create a new donation form that inherits settings from this form.',
    'access callback' => 'fundraiser_access_clone',
    'page callback' => 'fundraiser_clone_donation_form',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'fundraiser.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function fundraiser_menu_alter(&$items) {
  if (module_exists('trigger')) {
    $items['admin/build/trigger/fundraiser']['access callback'] = 'user_access';
    $items['admin/build/trigger/fundraiser']['access arguments'] = array('administer site configuration');
  }

  // alter some built-in webform menu items
  $items['node/%webform_menu/webform/configure']['access callback'] = 'fundraiser_webform_configure_access';
  $items['node/%webform_menu/webform/configure']['access arguments'] = array('update', 1);
}

/**
 * Implemenation of hook_clone_access_alter().
 *
 * Removing cloning access since fundraiser implements it's own cloning routine.
 */
function fundraiser_clone_access_alter(&$access, $node) {
  // remove access to node clone feature if it's a donation form node
  if (fundraiser_is_donation_type($node->type)) {
    $access = 0;
  }
}

/**
 * Deny access if a confirmation page has already been viewed.
 */
function fundraiser_access_confirmation() {
  global $user;
  $sid = $_GET['sid'];
  if (is_numeric($sid)) {
    // if not uid 1, check to see if the page can be viewed
    if ($user->uid != 1) {
      return !fundraiser_secure_confirmation($sid);
    }
    else {
      return TRUE; // uid 1
    }
  }
}

/**
 * Access callback, determines if the "clone" link should be displayed on a donation form.
 */
function fundraiser_access_clone() {
  global $user;
  $access = FALSE;
  $nid = arg(1);

  if (is_numeric($nid)) {
    $node = node_load($nid);
    if (fundraiser_is_donation_type($node->type)) {

      if (user_access('clone donation form')) {
        $access = TRUE;
      }

      // Alterable so modules like Advanced Permissions can tweak as needed.
      // Alter function: hook_fundraiser_access_clone_alter(), isn't that a peach?
      // Pointless to call the alter function if the current node isn't a donation form.
      drupal_alter("fundraiser_access_clone", $access, $node);
    }
  }
  
  return $access;
}

/**
 * Access callback: Check that the node in question is a donation form, and that
 * the user has permission to edit User mapping.
 */
function fundraiser_mapping_form_access($node) {
  return (fundraiser_is_donation_type($node->type)) && user_access('edit donation form user mapping');
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function fundraiser_theme_registry_alter(&$theme_registry) {
  // tell the theme registry to look in this module's directory for theme files
  $theme_registry['page']['theme paths'][] = drupal_get_path('module', 'fundraiser') . '/templates';
}

/**
 * Implementation of hook_preprocess_page().
 *
 * Add a template suggestion that renders a blank page template for our confirmation page token picker.
 */
function fundraiser_preprocess_page(&$vars) {
  if (arg(2) == 'confirmation') {
    // add the node to $vars
    $vars['node'] = node_load(arg(1));
  }
}

/**
 * Implmentation of hook_confirmation_page_tokens().
 */
function fundraiser_confirmation_page_tokens($type) {
  if (fundraiser_is_donation_type($type)) {
    $order_tokens = array();
    $items = token_get_list('order');
    foreach($items as $module => $tokens) {
      foreach($tokens as $token => $desc) {
        $order_tokens['order']['['. $token . ']'] = $desc;
      }
    }
  
    return $order_tokens;
  }
}

/**
 * Wildcard loader for form items; assumes that a passed form item also exists.
 */
function fundraiser_ahah_field_load($field) {
  return $field;
}

/**
 * Implementation of hook_node_info().
 */
function fundraiser_node_info() {
  return array(
    'donation_form' => array(
      'name' => t('Donation Form'),
      'module' => 'fundraiser',
      'description' => t('Create a flexible form that users can use to donate to noble causes.'),
      'has_title' => TRUE,
      'title_label' => t('Title'),
      'has_body' => TRUE,
      'body_label' => t('Body'),
      'locked' => TRUE,
    ),
  );
}

/**
 * Implementation of hook_boost_is_cacheable().
 *
 * If Boost is enabled, make sure donation form nodes aren't cached.
 */
function fundraiser_boost_is_cacheable($path) {
  $args = explode('/', drupal_get_normal_path($path));
  if ($args[0] == 'node' && isset($args[1]) && is_numeric($args[1]) && !isset($args[2])) {
    // It's a node, but is it a donation node?
    $node = node_load($args[1]);
    if (fundraiser_is_donation_type($node->type)) {
      // Don't cache donation forms
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Implementation of hook_form().
 */
function fundraiser_form($node, $edit = NULL) {
  
  $type = node_get_types('type', $node);

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5,
    '#maxlength' => 255,
  );
  
  $form['body_filter']['#weight'] = -4.97;
  $form['body_filter']['body'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->body_label),
    '#default_value' => $node->body,
    '#rows' => 7,
    '#weight' => -4.98,
    '#required' => FALSE,
  );
  $form['body_filter']['filter'] = filter_form($node->format);

  return $form;
}


/**
 * Validation handler for donation form settings.
 */
function fundraiser_node_settings_validate($form, $form_state) {
  $donation_amounts = array();
  for($i = 0; $i < $form_state['values']['amount_delta']; ++$i) {
    $value = 'amount_' . $i;
    if ($form_state['values'][$value]) {
      if (is_numeric($form_state['values'][$value])) {
        $donation_amounts[] = $form_state['values'][$value];
      }
      else {
        form_set_error($value, t('Ask amounts must be numeric, you entered "@s".', array("@s" => $form_state['values'][$value])));
        break;
      }
    }
  }
  $form_state['values']['donation_amounts'] = implode(',', $donation_amounts);
}

/**
 * Implements hook_nodeapi().
 */
function fundraiser_nodeapi(&$node, $op, $teaser, $page) {
  if (fundraiser_is_donation_type($node->type)) {
    switch($op) {
      case 'view':
        fundraiser_node_view($node, $teaser, $page);
        break;

      case 'load':
        fundraiser_node_load($node);
        break;

      case 'insert':
        fundraiser_node_insert($node);
        break;

      case 'update':
        fundraiser_node_update($node);
        break;

      case 'delete':
        fundraiser_node_delete($node);
        break;
    }
  }
}

/**
 * Inserts data for new donation forms.
 *
 * @param $node
 *   The new donation node being inserted.
 */
function fundraiser_node_insert(&$node) {

  // If not set these fields get default values.
  $node->receipt_email_from = isset($node->receipt_email_from) ? $node->receipt_email_from : variable_get('site_name', '');
  $node->receipt_email_address = isset($node->receipt_email_address) ? $node->receipt_email_address : variable_get('site_mail', '');
  $node->receipt_email_subject = isset($node->receipt_email_subject) ? $node->receipt_email_subject : 'Thank you for your donation';
  $node->redirect_url = isset($node->redirect_url) ? $node->redirect_url : '<confirmation>';

  db_query(
    "
      INSERT INTO {fundraiser}
      (
        nid,
        gateway,
        donation_amounts,
        show_other_amount,
        internal_name,
        minimum_donation_amount,
        receipt_email_from,
        receipt_email_address,
        receipt_email_subject,
        receipt_email_message,
        confirmation_page_title,
        confirmation_page_body,
        confirmation_page_format,
        redirect_url
      )
      VALUES (%d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')
    ",
        $node->nid,
        $node->gateway,
        $node->donation_amounts,
        $node->show_other_amount,
        $node->internal_name,
        $node->minimum_donation_amount,
        $node->receipt_email_from,
        $node->receipt_email_address,
        $node->receipt_email_subject,
        $node->receipt_email_message,
        $node->confirmation_page_title,
        $node->confirmation_page_body,
        $node->confirmation_page_format,
        $node->redirect_url
  );

  // skip some steps if the form is being cloned
  if (!$node->is_being_cloned) {

    $donation_amounts = array();
    // add webform components
    module_load_include('inc', 'fundraiser', 'fundraiser.fields');
    for($i = 0; $i < $node->amount_delta; ++$i) {
      $value = 'amount_' . $i;
      $label = 'label_' . $i;
      if ($node->$value) {
      $donation_amounts[$node->$value] = $node->$label;
      }
      ksort($donation_amounts, SORT_NUMERIC);
    }

    $components = fundraiser_create_webform_components($node->nid, $donation_amounts, $node->show_other_amount, $node->minimum_donation_amount);

    // automap
    fundraiser_user_map_create($node->nid, $components);
    // fire a hook that other modules can utilize to add additional processing when a donation form is created
    module_invoke_all('fundraiser_form_insert', $node, $components);
  }
}

/**
 * Implemenation of hook_update().
 */
function fundraiser_node_update(&$node) {

  // node_save() protection for various fields. Note ask amounts are complex and handled as
  // a unique case.
  $old_node = (array) node_load(array('nid' => $node->nid));

  // if any other node properties are misbehaving on node_save(), add them here.
  $settings = array('confirmation_page_format');
  foreach ($old_node as $key => $value) {
    if (in_array($key, $settings) && !isset($node->$key)) {
      $node->$key = $value;
      drupal_set_message("set $key -> $value");
    }
  }

  //drupal_set_message('<pre>' . print_r($node, true) . '</pre>');
  module_load_include('inc', 'fundraiser', 'fundraiser.fields');
  db_query(
    "
      UPDATE {fundraiser} SET
      internal_name = '%s',
      show_other_amount = %d,
      minimum_donation_amount = '%s',
      gateway = '%s',
      receipt_email_from = '%s',
      receipt_email_address = '%s',
      receipt_email_subject = '%s',
      receipt_email_message = '%s',
      confirmation_page_title = '%s',
      confirmation_page_body = '%s',
      confirmation_page_format = '%s',
      redirect_url = '%s'
  		WHERE nid = %d
    ",
    $node->internal_name,
    $node->show_other_amount,
    $node->minimum_donation_amount,
    $node->gateway,
    $node->receipt_email_from,
    $node->receipt_email_address,
    $node->receipt_email_subject,
    $node->receipt_email_message,
    $node->confirmation_page_title,
    $node->confirmation_page_body,
    $node->confirmation_page_format,
    $node->redirect_url,
    $node->nid
  );
  
  // Update donation amounts and labels.
  $donation_amounts = array();

  for ($i = 0; $i < $node->amount_delta; ++$i) {
    $amount = 'amount_' . $i;
    $label = 'label_' . $i;
    if ($node->$amount) {

      $donation_amounts[$node->$amount] = $node->$label;
    }
  }

  ksort($donation_amounts, SORT_NUMERIC);

  $keys = array_keys($donation_amounts);
  _fundraiser_update_amount_webform_component($node, $donation_amounts, $keys[0]);

  // update the label on the minimum donation amount
  if ($node->show_other_amount) {
		$extra = db_result(db_query("SELECT extra FROM {webform_component} WHERE nid = %d AND form_key = 'other_amount'", $node->nid));
		$extra = unserialize($extra);
		$extra['description'] = 'Minimum payment $' . $node->minimum_donation_amount . '.';
		db_query("UPDATE {webform_component} SET extra = '%s' WHERE nid = %d AND form_key = 'other_amount'", serialize($extra), $node->nid);
	}
}

/**
 * Deletes a fundraiser record when the node is deleted.
 */
function fundraiser_node_delete(&$node) {
  db_query("DELETE FROM {fundraiser} WHERE nid = %d", $node->nid);
}

/**
 * Implements the load $op in hook_nodeapi().
 *
 * @param $node
 *   The node being loaded.
 */
function fundraiser_node_load(&$node) {
  // load all fundraiser properties
  $fundraiser = db_fetch_array(db_query("SELECT gateway, receipt_email_from, receipt_email_address, receipt_email_subject, receipt_email_message, donation_amounts, show_other_amount, internal_name, minimum_donation_amount, confirmation_page_title, confirmation_page_body, confirmation_page_format, redirect_url FROM {fundraiser} WHERE nid = %d", $node->nid));
  
  // add each property to the node object
  foreach ($fundraiser as $field => $value) {
    $node->{$field} = $value;
  }

  // get the user profile map
  $result = db_query("SELECT cid, map_id FROM {fundraiser_component_map} WHERE nid = %d", $node->nid);
  while($row = db_fetch_array($result)){
    $map[$row['cid']] = $row['map_id'];
  }

  // Protection vs node_save() for donation amounts.
  $extra = db_result(db_query('SELECT extra FROM {webform_component} WHERE nid = %d and form_key = "amount"', $node->nid));
  $extra = unserialize($extra);

  $items = preg_split('/\n/', $extra['items']);
  $count = 0;

  for ($i = 0; $i < count($items); ++$i) {
    $item = explode('|', $items[$i]);
    if ($item[0] != 'other') {
      $amount = 'amount_' . $i;
      $label = 'label_' . $i;
      $node->$amount = $item[0];
      $node->$label = $item[1];
      ++$count;
    }
  }
  
  $node->amount_delta = $count;
  $node->map = $map;
}

/**
 * Handles the view $op for hook_nodeapi().
 *
 * @param $node
 *   The node being viewed.
 * @param $teaser
 *   Flag to indicate teaser view.
 * @param $page
 *   Flag to indicate page view.
 */
function fundraiser_node_view(&$node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser && $page) {
    fundraiser_track_pageview();
  }
  // use Drupal's default node view
  $node = node_prepare($node, $teaser);
  
  // set a reminder to turn off development mode on the page view
  if (variable_get('fundraiser_development_mode', 0) && $page) {
    drupal_set_message(t('Fundraiser is currently running in development mode. Remember to !link this feature on production websites.', array('!link' => l('turn off', 'admin/settings/fundraiser'))));
  }
  
  if ((!fundraiser_is_secure() && !variable_get('fundraiser_development_mode', 0)) && !$teaser) {
    $error = variable_get('fundraiser_http_error_message', t("We're sorry.

The donation form you are trying to access has not been secured properly. Safeguarding your personal information is extremely importance to us, therefore we cannot accept donations from this form at this time.

An administrator has been notified and will correct the issue as soon as possible.

Thanks for your understanding."));
    $node->content['body']['#value'] = $error;
  }
  
  return $node;
}

/**
 * Check if the current page is SSL
 */
function fundraiser_is_secure() {
  return (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? TRUE : FALSE;
}

/**
 * Alter the webform component delete form to prevent the deletion of required fundraiser fields
 */
function fundraiser_form_webform_component_delete_form_alter(&$form, &$form_state) {
  // makes sure we are dealing with a donation form
  if (fundraiser_is_donation_type($form['node']['#value']->type)) {
    module_load_include('inc', 'fundraiser', 'fundraiser.fields');
    $required_fields = fundraiser_required_fields();
    
    $cid = arg(4);
    $component = $form['node']['#value']->webform['components'][$cid];
    // check to see if the form_key is in our required fields array
    if (in_array($component['form_key'], $required_fields)) {
      $message = t('<strong>!name</strong> is a required fundraiser field and cannot be deleted from this form.', array('!name' => $component['name']));
      $form['description']['#value'] = $message;
      unset($form['actions']['submit']);
    }
  }
}

/**
 * Submit handler for donation form cloning.
 */
function fundraiser_clone_form($form, &$form_state) {
  module_load_include('inc', 'fundraiser', 'fundraiser.admin');
  $nid = $form['nid']['#value'];
  fundraiser_clone_donation_form($nid);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds a setting that allows the user to specify this content type as a donation type.
 */
function fundraiser_form_node_type_form_alter(&$form, &$form_state) {
  if (isset($form['#node_type'])) {
    $form['fundraiser_type'] = array(
      '#type' => 'fieldset',
      '#title' => t('Fundraiser settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );
    $form['fundraiser_type']['fundraiser'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable fundraiser?'),
      '#default_value' => variable_get('fundraiser_' . $form['#node_type']->type, FALSE),
      '#description' => t('Enable this checkbox if this content type should provide a donation field.'),
    );
  }
}

/**
 * Adds fundraiser specific fields to the node add/edit form.
 *
 * @param $form
 *   The form to add the fields to.
 *
 * @param $edit
 * $form_state from the parent formm required to utlize posted values during ahah form rebuild.
 *
 * @param $node
 *   The node being added/edited.
 */
function fundraiser_node_settings(&$form, $edit, $node) {
  
  drupal_add_css(drupal_get_path('module', 'fundraiser') . '/fundraiser.css', 'module', 'all');
  drupal_add_js(drupal_get_path('module', 'fundraiser') . '/fundraiser_form.js', 'module', 'header', FALSE, FALSE, FALSE);

  // payment gateway list
  $gateway_options = module_invoke_all('fundraiser_gateway', 'select options', $node);
  
  // warn the user if there are no payment gateways.
  if (empty($gateway_options)) {
    drupal_set_message(t('In order to create donation forms, there must be at least one payment gateway configured'), 'warning');
  }

  $form['fundraiser_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fundraiser settings'),
    '#weight' => -4.96,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['fundraiser_settings']['internal_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Internal Name'),
    '#required' => TRUE,
    '#default_value' => $node->internal_name,
    '#weight' => -5,
    '#maxlength' => 255,
  );
  
  /* add amount #aha */
  $form['fundraiser_settings']['amount_wrapper'] = array(
    '#type' => 'fieldset',
    '#title' => t('Ask amounts'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => -3,
    '#prefix' => '<div class="clear-block" id="ask-wrapper">',
    '#suffix' => '</div>',
  );

  $form['fundraiser_settings']['amount_wrapper']['amounts'] = array(
    '#prefix' => '<div id="ask-amounts">',
    '#suffix' => '</div>',
    '#theme' => 'fundraiser_ask_amounts',
  );
  
  // Retrieve saved values if available
  $amount_values = array();
  if (is_numeric($node->nid)) {
    $results = db_query('SELECT extra FROM {webform_component} WHERE nid = %d AND form_key = "amount"', $node->nid);
    $amount_values = unserialize(db_result($results));
    $amount_values = preg_split('/\n/', trim($amount_values['items']));
  }

 // If we're editing an existing donation form that's had new fields added we use the current delta (updated by the more button) to tell the form
 // how many field sets to build.
 if ($edit['values']['amount_delta']) {
    $delta = $edit['values']['amount_delta'];
  }
  // Otherwise we start by generating enough fields to house the data currently in the database.
  elseif (count($amount_values)) {
    $delta = count($amount_values);
  }
  // New forms default to three sets of amount|label fields.
  else {
    $delta = 3;
  }
  
  $form['fundraiser_settings']['amount_wrapper']['amounts']['amount_delta'] = array(
    '#type' => 'value',
    '#value' => $delta,
  );
  
  for ($i = 0; $i < $delta; ++$i ) {
    $form['fundraiser_settings']['amount_wrapper']['amounts'][] = _fundraiser_ask_form($i, $edit, $amount_values);
  }
  
  $form['fundraiser_settings']['amount_wrapper']['help'] = array(
    '#value' => '<p>' . t('If you want the user to choose from a predetermined list donation amounts, enter them here. If no amounts are entered, a textbox will be displayed for the user to enter a custom amount.') . '</p>',
  );
  
  $form['fundraiser_settings']['amount_wrapper']['amount_more'] = array(
    '#type' => 'submit',
    '#value' => t('Add another'),
    '#description' => t("Click here to add more choices."),
    '#submit' => array('_fundraiser_amount_ahah_submit'), // If no javascript action.
    '#ahah' => array(
      'path' => 'fundraiser_ask/js',
      'wrapper' => 'ask-amounts',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  $form['fundraiser_settings']['amount_wrapper']['show_other_amount'] = array (
    '#type' => 'checkbox',
    '#title' => t('Show other amount option'),
    '#description' => t('Use this option if you want to provide an "Other Amount" field in conjunction with the list of Donation Amounts.'),
    '#default_value' => $node->show_other_amount,
  );
  
  $form['fundraiser_settings']['amount_wrapper']['minimum_donation_amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum donation amount'),
    '#description' => t('The minimum acceptable donation amount.'),
    '#default_value' => $node->minimum_donation_amount ? number_format($node->minimum_donation_amount, 2) : variable_get('fundraiser_default_minimum', 10.00),
  );
  
  $form['fundraiser_settings']['gateway'] = array(
    '#type' => 'select',
    '#title' => t('Payment Gateway'),
    '#options' => $gateway_options,
    '#weight' => -4,
    '#description' => t('The payment gateway that will be used to process payments for this donation form.'),
    '#default_value' => $node->gateway,
    '#required' => TRUE,
  );
  
  /* hidden fields */
  $form['confirmation_page_title'] = array(
    '#type' => 'hidden',
    '#value' => $node->confirmation_page_title,
  );
  $form['confirmation_page_body'] = array(
    '#type' => 'hidden',
    '#value' => $node->confirmation_page_body,
  );
  $form['receipt_email_from'] = array(
    '#type' => 'hidden',
    '#value' => $node->receipt_email_from,
  );
  $form['receipt_email_address'] = array(
    '#type' => 'hidden',
    '#value' => $node->receipt_email_address,
  );
  $form['receipt_email_subject'] = array(
    '#type' => 'hidden',
    '#value' => $node->receipt_email_subject,
  );
  $form['receipt_email_message'] = array(
    '#type' => 'hidden',
    '#value' => $node->receipt_email_message,
  );
  $form['redirect_url'] = array(
    '#type' => 'hidden',
    '#value' => $node->redirect_url,
  );

  // TODO: write submit handler, check permissions before displaying button
  $form['buttons']['clone'] = array(
    '#type' => 'submit',
    '#value' => 'Clone',
    '#submit' => array('fundraiser_clone_form'),
    '#weight' => 100,
  );

  $form['#validate'][] = 'fundraiser_node_settings_validate';
  $form['#after_build'][] = '_fundraiser_validation_includes';
}

/**
 * Submit handler for node type form.
 *
 * Adds type to webform variable when marked as a fundraiser type.
 */
function fundraiser_node_type_form_submit(&$form, &$form_state) {
  if ($form_state['values']['fundraiser']) {
    fundraiser_webform_types_primary($form_state['values']['type'], 'insert');
  }
  else {
    fundraiser_webform_types_primary($form_state['values']['type'], 'delete');
  }
}

/**
 * Implements hook_form_alter().
 */
function fundraiser_form_alter(&$form, $form_state, $form_id) {

  if ($form_id == 'node_type_form') {
    // add a submission handler to set webform_node_types_primary if type is flagged as donation type
    $form['#submit'][] = 'fundraiser_node_type_form_submit';
  }

  // add fundraiser settings to node add/edit form
  if (isset($form['#node']) && fundraiser_is_donation_type($form['#node']->type) && substr($form_id, -10) == '_node_form') {
    // add fundraiser settings to the node form
    fundraiser_node_settings($form, $form_state, $form['#node']);
  }
  			
	if (strstr($form_id, 'webform_client_form')) {
    $node = $form['#parameters'][2];
		global $user;
    profile_load_profile($user); /* explicitly load profile as of Drupal 6.19 */

    // get fundraiser info
    $node = $form['#parameters'][2];

    // handle donation form submissions
    if (fundraiser_is_donation_type($node->type) && arg(2) == 'submission') {
      // Set up a view only display of the donation amount
      $amount = ('other' != $form['submitted']['donation']['amount']['#default_value']) ? $form['submitted']['donation']['amount']['#default_value'] : $form['submitted']['donation']['other_amount']['#default_value'];
      $form['submitted']['donation']['display_amount'] = array(
        '#type' => 'markup',
        '#value' => '<div class="form-item"><label>' . t('Donation Amount') . ':</label>' . '$' . number_format($amount, 2) . '</div>',
      );
      
      // Show whether or not it's a recurring donation
      if (isset($form['submitted']['credit_card_information']['recurs_monthly'])) {
        $recurs = $form['submitted']['credit_card_information']['recurs_monthly']['#default_value'][0] == 'recurs' ? t('Yes') : t('No');
        $form['submitted']['donation']['recurring'] = array(
          '#type' => 'markup',
          '#value' => '<div class="form-item"><label>' . t('Recurring Donation?') . ':</label>' . $recurs . '</div>',
        );
      }
      unset($form['submitted']['donation']['amount']);
      unset($form['submitted']['donation']['other_amount']);
      unset($form['submitted']['credit_card_information']);
      
      // Clean up the donor info section - replace the form fields with read only info
      $form['submitted']['donor_information']['#title'] = t('Donor Information');
      
      $form['submitted']['donor_information']['first_name_readonly'] = array(
        '#type' => 'markup',
        '#value' => '<div class="form-item"><label>' . t('First Name') . ':</label>' . $form['submitted']['donor_information']['first_name']['#default_value'] . '</div>',
      );
      $form['submitted']['donor_information']['last_name_readonly'] = array(
        '#type' => 'markup',
        '#value' => '<div class="form-item"><label>' . t('Last Name') . ':</label>' . $form['submitted']['donor_information']['last_name']['#default_value'] . '</div>',
      );
      $form['submitted']['donor_information']['email_readonly'] = array(
        '#type' => 'markup',
        '#value' => '<div class="form-item"><label>' . t('Email') . ':</label>' . $form['submitted']['donor_information']['email']['#default_value'] . '</div>',
      );
      
      $form['submitted']['donor_information']['first_name']['#prefix'] =
        $form['submitted']['donor_information']['last_name']['#prefix'] =
        $form['submitted']['donor_information']['email']['#prefix'] = '<div style="display:none">';
         
      $form['submitted']['donor_information']['first_name']['#suffix'] =
        $form['submitted']['donor_information']['last_name']['#suffix'] =
        $form['submitted']['donor_information']['email']['#suffix'] = '</div>';
    }
    
    // handle the donation form itself
    if (fundraiser_is_donation_type($node->type) && arg(2) != 'submission') {
      // check to see if the form is being accessed over HTTPS, if not, disable access.
      if (!fundraiser_is_secure() && !variable_get('fundraiser_development_mode', 0)) {
        fundraiser_disable_elements($form);
      }

      // Pull the correct action out of form_state if it's there to avoid AHAH+Validation action-rewrite.
      if (isset($form_state['action'])) {
        $form['#action'] = $form_state['action'];
      }

      $base = drupal_get_path('module', 'fundraiser');
      drupal_add_js($base .'/jquery.alphanumeric.js');
      drupal_add_js($base .'/fundraiser.js');
      drupal_add_css($base . '/fundraiser-donation-form.css');

			$components = $node->webform['components'];
      // create an data structure that will tell us exactly where each webform component lives in the FAPI array
      $component_hierarchy = fundraiser_parse_components($node->nid, $components);
			
			// preload any fields if the user is logged in
      if (user_is_logged_in()) {
				// load up map
				$map = fundraiser_user_map($node->nid);
				// load up any mapped profile fields
				foreach($map as $field_key => $profile_key) {
				  $field =& fundraiser_find_field($form, $component_hierarchy[$field_key]);
				  if (empty($field['#default_value'])) {
				    if (property_exists($user, $profile_key)) {
				      switch ($field['#type']) {
				        case 'checkboxes':
				          $field['#default_value'] = array($user->$profile_key);
				          break;
				        
				        default:
				          $field['#default_value'] = $user->$profile_key;
				      }
				    }
				  }
				}
			}
			
			// combine expiration month and year into a single component
			$cc_exp_month_field =& fundraiser_find_field($form, $component_hierarchy['card_expiration_month']);
			$cc_exp_year_field =& fundraiser_find_field($form, $component_hierarchy['card_expiration_year']);
			$cc_info_field =& fundraiser_find_field($form, $component_hierarchy['credit_card_information']);

      $cc_exp_month_field['#default_value'] = date('n');
      $cc_exp_year_field['#default_value'] = date('Y');
      
      // make sure the year field always has a good range of years
    	$this_year = date('Y');
    	$years = array($this_year => $this_year);
    	$cc_exp_year_range = variable_get('fundraiser_cc_exp_year_range', 10);
    	for ($i = 0; $i <= $cc_exp_year_range; $i++) {
        $years[$this_year + $i] = $this_year + $i;
      }
      $cc_exp_year_field['#options'] = $years;
      
      // check to see if the credit card information fieldset still exists because it may have been removed
      if (is_array($cc_info_field)) {
        $cc_info_field['expiration_date'] = array();
        $cc_info_field['expiration_date']['card_expiration_month'] = $cc_exp_month_field;
        $cc_info_field['expiration_date']['card_expiration_year'] = $cc_exp_year_field;
        $cc_info_field['expiration_date']['#weight'] = $cc_exp_month_field['#weight'];
        $cc_info_field['expiration_date']['#theme'] = 'fundraiser_credit_card_expiration_date';
      }
      else {
        // add the new expiration_date directly to the form with the same weight as the cc_exp_month field
        $form['expiration_date'] = array();
        $form['expiration_date']['card_expiration_month'] = $cc_exp_month_field;
        $form['expiration_date']['card_expiration_year'] = $cc_exp_year_field;
        $form['expiration_date']['#weight'] = $cc_exp_month_field['#weight'];
        $form['expiration_date']['#theme'] = 'fundraiser_credit_card_expiration_date';
      }
			// remove old fields after moving them
			$cc_exp_month_field = NULL;
			$cc_exp_year_field = NULL;
			
			// alter country drop down to populate zone drop down via ahah
			$country_field =& fundraiser_find_field($form, $component_hierarchy['country']);
      $country_field['#ahah'] = array('path' => 'fundraiser/js/state', 'wrapper' => 'zone-select-wrapper');
      
      // add default country & state values from user profile
      $fids = _fundraiser_get_profile_location_fields();
      if (user_is_logged_in() && $fids['country'] && $user->profile_country) {
        $country_field['#default_value'] = db_result(db_query('SELECT uc.country_id FROM {uc_countries} uc INNER JOIN {profile_values} pv ON pv.value = uc.country_iso_code_2 AND pv.uid = %d AND pv.fid = %d', $user->uid, $fids['country']));
      }

      // add a wrapper around the state field so it can be replaced via ajax
			$state_field =& fundraiser_find_field($form, $component_hierarchy['state']);
			if (user_is_logged_in() && $fids['state'] && $user->profile_state) {
			  $state_field['#default_value'] = db_result(db_query('SELECT uz.zone_id FROM {uc_zones} uz INNER JOIN {profile_values} pv ON pv.value = uz.zone_code AND pv.uid = %d AND pv.fid = %d', $user->uid, $fids['state']));
			}
			$state_field['#prefix'] = '<div id="zone-select-wrapper">';
			$state_field['#suffix'] = '</div>';
      
      // flatten form state array so that it is easier to work with
			$fields = _fundraiser_array_flatten($form_state);
			// country/state dependant drop down code
			if (array_key_exists('country', $fields)) {
				$country_field['#default_value'] = $fields['country']; // user selected country
				// populate via Ahah!
				$state_field['#options'] = fundraiser_get_country_zones($fields['country']);
			}
			else {
        $state_field['#options'] = fundraiser_get_country_zones($country_field['#default_value']); // default country as defined in the component definition
			}

			// add a validation handler and two additional submit handlers
			$form['#validate'][] = 'fundraiser_webform_validate';
			$form['#submit'][] = 'fundraiser_webform_submit';
			$form['#submit'][] = 'fundraiser_confirmation';
      $form['submit']['#suffix'] = '<div class="fundraiser_submit_message">' . theme('image', drupal_get_path('module', 'fundraiser') . '/padlock.gif') . t('By clicking SUBMIT DONATION your credit card will be securely processed.') . '</div>';
		}
  }

  // Alter the form on the webform's Form Settings tab
  if ($form_id == 'webform_configure_form' && fundraiser_is_donation_type($form['#parameters'][2]->type)) {
    // Hide fields that are on the Confirmations tab
    $form['submission']['confirmation_wrapper']['#access'] = FALSE;
    $form['submission']['redirection']['#access'] = FALSE;
  }
}



/**
 * Creates an array to map webform component fields to user profile fields.
 */
function fundraiser_user_map($nid) {
  $map = array();
  $result = db_query(
    "
      SELECT w.form_key, f.cid, f.map_id, w.type
      FROM {webform_component} w
      INNER JOIN {fundraiser_component_map} f ON f.cid = w.cid AND f.nid = w.nid
      WHERE f.nid = %d
      ORDER BY f.cid
    ",
    $nid
  );
  
  while ($row = db_fetch_array($result)) {
    $map[$row['form_key']] = $row['map_id'];
  }
  
  return $map;
}

/**
 * Returns a reference to an element of a FAPI array based on a known path.
 */
function &fundraiser_find_field(&$form, $path) {
  foreach(array_keys($path) as $v) {
    if (is_array($path[$v]) && count($path[$v])) { // if there are more keys
      return fundraiser_find_field($form[$v], $path[$v]);
    }
    else {
      return $form[$v];
    }
  }
}

/**
 * Creates a nested array of where components exist in the FAPI array for all components in a weblform.
 * This is needed because the fundraiser module allows the user to move components around. Therefore
 * we must be able to find them if they are not in their usual spot.
 */
function fundraiser_parse_components($nid, $components) {
  $component_hierarchy = array();
  foreach($components as $cid => $component) {
    $component_path = 'submitted[' . implode('][', fundraiser_walk_component_hierarchy($nid, $cid)) . ']';
    parse_str($component_path, $output); // convert string to a nested array
    $component_hierarchy[$component['form_key']] = $output;
  }
  return $component_hierarchy;
}

/**
 * Creates a nested array of where a component exists in the FAPI array.
 */
function fundraiser_parse_component($nid, $form_key) {
  $cid = db_result(db_query("SELECT cid FROM {webform_component} WHERE nid = %d and form_key = '%s'", $nid, $form_key));
  $component_path = 'submitted[' . implode('][', fundraiser_walk_component_hierarchy($nid, $cid)) . ']';
  parse_str($component_path, $output); // convert string to a nested array
  return $output;
}

/**
 * Builds a path from the webform component to its topmost parent.
 */
function fundraiser_walk_component_hierarchy($nid, $cid, &$path = array()) {
  // Store all the components for this node in a static cache to reduce the
  // number of duplicated database hits.
  static $component_hierarchy = array();
  if (empty($component_hierarchy[$nid])) {
    $component_hierarchy[$nid] = array();
    $result = db_query("SELECT cid, pid, form_key FROM {webform_component} WHERE nid = %d", $nid);
    while ($data = db_fetch_object($result)) {
      $component_hierarchy[$nid][$data->cid][] = $data;
    }
  }
  // Build a path from the webform component to its topmost parent.
  foreach ($component_hierarchy[$nid][$cid] as $data) {
    array_unshift($path, $data->form_key);
    if ($data->pid > 0) {
      fundraiser_walk_component_hierarchy($nid, $data->pid, $path);
    }
  }
  return $path;
}

/**
 * AHAH callback for dealing with changes to the donation form.
 *
 * @param $field
 *   The field that is being affected by the AHAH call.
 */
function _fundraiser_ahah_helper_render($field = NULL) {
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];

  // Get the form from the cache.
  $form = form_get_cache($form_build_id, $form_state);
  $args = $form['#parameters'];
  $form_id = array_shift($args);

  // Are we on the node form?
  $node_form = FALSE;
  if (preg_match('/_node_form$/', $form_id)) {
    $node_form = TRUE;
    module_load_include('inc', 'node', 'node.pages');
  }

  // We will run some of the submit handlers so we need to disable redirecting.
  $form['#redirect'] = FALSE;
  // We need to process the form, prepare for that by setting a few internals
  // variables.
  $form['#post'] = $_POST;
  $form['#programmed'] = FALSE;
  // Stash original form action to avoid overwriting with drupal_rebuild_form().
  $form_state['action'] = $form['#action'];
  $form_state['post'] = $_POST;
  
  // $form_state['storage']['#ahah_helper']['file'] has been set, to know
  // which file should be loaded. This is necessary because we'll use the form
  // definition itself rather than the cached $form.
  if (isset($form_state['storage']['#ahah_helper']['file'])) {
    require_once($form_state['storage']['#ahah_helper']['file']);
  }

  $form_state['submitted'] = TRUE;

  if (!isset($_POST['op'])) {
    // For the default "{$form_id}_validate" and "{$form_id}_submit" handlers.
    $form['#validate'] = NULL;
    $form['#submit'] = NULL;
    // For customly set #validate and #submit handlers.
    $form_state['submit_handlers'] = NULL;
    $form_state['validate_handlers'] = NULL;
    // Disable #required and #element_validate validation.
    fundraiser_ahah_helper_disable_validation($form);
  }

  // Build, validate and if possible, submit the form.
  drupal_process_form($form_id, $form, $form_state);
  if ($node_form) {
    // get the node from the submitted values
    $node = node_form_submit_build_node($form, $form_state);
    // hack to stop taxonomy from resetting when the form is rebuilt
    $form_state['node']['taxonomy'] = taxonomy_preview_terms($node);
  }

  // This call recreates the form relying solely on the form_state that the
  // drupal_process_form set up.
  //$form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);

  // Get the form item we want to render.
  //$form_item = _ahah_helper_get_form_item($form, $form_item_to_render);
  $nid = $form['#parameters'][2]->nid;
  $form_item = fundraiser_find_field($form, fundraiser_parse_component($nid, $field));

  // Get the JS settings so we can merge them.
  $javascript = drupal_add_js(NULL, NULL, 'header');
  $settings = call_user_func_array('array_merge_recursive', $javascript['setting']);

  drupal_json(array(
    'status'   => TRUE,
    'data'     => theme('status_messages') . drupal_render($form_item),
    'settings' => array('ahah' => $settings['ahah']),
  ));
}

/**
 * Helper function for disabling validation during AHAH form submissions.
 */
function fundraiser_ahah_helper_disable_validation(&$form) {
  foreach (element_children($form) as $child) {
    $form[$child]['#validated'] = TRUE;
    fundraiser_ahah_helper_disable_validation($form[$child]);
  }
}

/**
 * Deny access to all form components.
 */
function fundraiser_disable_elements(&$form) {
  foreach (element_children($form) as $child) {
    $form[$child]['#access'] = FALSE;
    fundraiser_disable_elements($form[$child]);
  }
}

/**
 * Implementation of hook_webform_submission_update()
 */
function fundraiser_webform_submission_update($node, $submission) {
  if (fundraiser_is_donation_type($node->type)) {
    if (module_exists('queue_api')) {
      if ($order_id = db_result(db_query("SELECT f.order_id FROM {fundraiser_webform_order} f INNER JOIN {uc_orders} u ON u.order_id = f.order_id WHERE f.webform_nid = %d AND f.sid = %d AND u.order_status = 'payment_received'", $node->nid, $submission->sid))) {
        // Determine if we need an INSERT or an UPDATE
        $action = 'create';
        if ($sfid = db_result(db_query('SELECT sfid FROM {salesforce_management_object_map} WHERE oid = %d AND drupal_type = "donation"', $order_id))) {
  	  	  $action = 'update';
        }
        sf_queue_insert($order_id, FUNDRAISER_SINGLE_DONATION_TYPE, $action);
      }
    }
  }
}

/**
 * Implementation of hook_webform_submission_presave().
 */
function fundraiser_webform_submission_presave($node, &$submission) {
  // remove any non-component form fields from the submitted data
  unset($submission->data['']);
  
  // remove senstive form data before the submission is saved to the database
  if (fundraiser_is_donation_type($node->type)) {
    $result = db_query("SELECT cid FROM {webform_component} WHERE nid = %d AND form_key IN ('card_number', 'card_cvv', 'card_expiration_date')", $node->nid);
    while ($data = db_fetch_object($result)) {
      $submission->data[$data->cid]['value'][0] = NULL;
    }
  }
}




/**
 * Permission check for webform form settings tab.
 */
function fundraiser_webform_configure_access($perm, $node) {
  return node_access($perm, $node);
}

function fundraiser_confirmations_perm($perm, $node) {
  if ((fundraiser_is_donation_type($node->type)) && node_access($perm, $node)) {
    return true;
  }
  return false;
}

/**
 * Determines if a user has any recurring donations.
 */
function fundraiser_user_has_recurring_orders($account) {
  global $user;

  $count = db_result(db_query(
    "
      SELECT count(u.order_id) FROM uc_orders u
      INNER JOIN fundraiser_recurring f on f.master_order_id = u.order_id
      WHERE u.uid = %d
    ",
    $account->uid
  ));
  
  if ($count > 0) {
    // If a user has recurring donations, then check user_access() for
    // necessary access permissions.
    return user_access('cancel future donations') ||
      (($user->uid === $account->uid) && user_access('manage own recurring donations'));
  }
  return FALSE;
}

/**
 * Fundraiser confirmation page.
 */
function fundraiser_donation_confirmation($node) {
  drupal_set_title(check_plain($node->confirmation_page_title));
  if (empty($output)) {
    $output = theme(array('fundraiser_confirmation_' . $node->nid, 'fundraiser_confirmation'), $node, $_GET['sid']);
  }

  return $output;
}

/**
 * Implementation of hook_acces().
 */
function fundraiser_access($op, $node, $account) {
  $is_author = $account->uid == $node->uid;
  switch ($op) {
    case 'create':
      return user_access('create donation form', $account) ? TRUE : NULL;
    case 'update':
      return ((user_access('edit own donation form', $account) && $is_author) || user_access('edit any donation form', $account)) ? TRUE : NULL;
    case 'delete':
      return ((user_access('delete own donation form', $account) && $is_author) || user_access('delete any donation form', $account)) ? TRUE : NULL;
  }
}

function fundraiser_recurring_check_access() {
	$resource = db_query("select order_id from {fundraiser_recurring} where master_order_id=%d or order_id=%d",arg(3),arg(3));
	$array = db_fetch_array($resource);
	$bool = FALSE;
	if(!empty($array)){
		$bool = TRUE;
	}
	return $bool;
}

/**
 * Retrieves an array of Ubercart zone IDs.
 *
 * @param $country_id
 * Expects a valid Ubercart country id (example: USA id is 840).
 *
 * @return
 * Returns an array of available zone id's associated with the country id.
 */
function fundraiser_get_country_zones($country_id) {
	$zones = uc_zone_select(uc_get_field_name('zone'), NULL, NULL, $country_id, 'name', uc_address_field_required('zone'));
	$zone_array = array();
	foreach ($zones['#options'] as $key => $value) {
		$zone_array[$key] = $value;
	}
	return $zone_array;
}

/**
 * Automatically maps predefined webform components to user profile fields.
 */
function fundraiser_user_map_create($nid, $components) {
  foreach($components as $cid => $component) {
    if (array_key_exists('maps_to', $component)) {
      db_query("INSERT INTO {fundraiser_component_map} (nid, cid, map_id) VALUES (%d, %d, '%s')", $nid, $cid, $component['maps_to']);
    }
  }
  drupal_set_message(t('User profile fields have been mapped. Use the User Map tab to edit the map.'));
}

/**
 * Implemenation of template_preprocess_fundraiser_confirmation().
 *
 * Sets $confirmation_message template variable.
 * Other supported template variables:
 * - $confirmation_message_prefix: displays before the confirmation message.
 * - $confirmation_message_suffix: displays after the confirmation message.
 */
function template_preprocess_fundraiser_confirmation(&$vars) {
  $sid = $vars['sid'];
  if ($sid) {
    // load up the id of the order
    $order_id = db_result(db_query("SELECT order_id FROM {fundraiser_webform_order} WHERE sid = %d", $sid));
    $order = uc_order_load($order_id);
    module_load_include('inc', 'webform', 'includes/webform.submissions');
    $submission = webform_get_submission($vars['node']->nid, $sid);
    $message = $vars['node']->confirmation_page_body;
    
    // replace any submission level tokens
    $message = _webform_filter_values($message, $vars['node'], $submission, NULL, FALSE, TRUE);
    // replace any order tokens
    $message = token_replace($message, 'order', $order);
    
    // set a variable that can be used in the template
    $vars['confirmation_message'] = $message;
    
    // Flag sid as viewed
    fundraiser_secure_confirmation_flag($sid);
  }
}

/**
 * Theme function for the sustainer management page.
 *
 * @param $vars
 *   The variables passed into the theme function
 */
function fundraiser_preprocess_sustainer_management_page(&$vars) {
  global $user;
  $profile_uid = arg(1);
  // convert the array of orders to a nice data table
  $header = array('Amount', 'Start Date', 'Next Charge Date', 'Expire Date', 'Status');
  $rows = array();
  
  // format the dates
  $class = '';
  foreach($vars['orders'] as $id => &$order) {
    $edit_link = l('$' . money_format('%i', $order['amount']), 'user/' . $profile_uid . '/recurring_overview/' . $id);
    if ($id == $vars['order_id']) {
      $class = 'recurring-order active';
    }
    else {
      $class = 'recurring-order';
    }
    $rows[] = array(
      'data' => array(
        'amount' => $edit_link,
        'start_date' => date('m/d/y', $order['start_date']),
        'next_charge_date' => date('m/d/y', $order['next_charge_date']),
        'expire_date' => date('m/d/y', $order['expire_date']),
        'status' => $order['status'] == DONATION_CANCELLED ? 'cancelled' : 'active',
      ),
      'class' => $class,
    );
  }
  
  $vars['orders'] = theme('table', $header, $rows);
  
  // format payment schedule into a data table
  $payment_schedule_header = array('Amount', 'Charge Date', 'Processed Status');
  // format some of the data in the array before output
  foreach($vars['payment_schedule'] as &$payment_schedule) {
    $payment_schedule['amount'] = '$' . money_format('%i', $payment_schedule['amount']);
    $payment_schedule['charge_date'] = date('m/d/y', $payment_schedule['charge_date']);
    $payment_schedule['status'] = empty($payment_schedule['status']) ? 'pending' : $payment_schedule['status'];
  }
  $vars['payment_schedule'] = theme('table', $payment_schedule_header, $vars['payment_schedule']);
}

/**
 * Validate donation form submissions.
 */
function fundraiser_webform_validate($form, &$form_state) {

  // there are certain conditions (eg. drupal_execute()) where we want to
  // be able to sidestep validation.
  $validate = TRUE;
  $validate_contrib = module_invoke_all('fundraiser_validate_webform_enabled', $form_state, $validate);
  foreach ($validate_contrib as $value) {
    if (!$value) {
      // if any hook invoked returns false, turn off validation.
      return 1;
    }
  }

	$fundraiser_fields = _fundraiser_array_flatten($form_state['values']['submitted']);
	
	$node_id = $form_state['values']['details']['nid'];
	$errors = false;
	// collect all of our donation fields
	$donation_amount = $fundraiser_fields['amount'];
	$cc_number = $fundraiser_fields['card_number'];
	$cc_cvv = $fundraiser_fields['card_cvv'];
	$cc_expiration_month = $fundraiser_fields['card_expiration_month'];
	$cc_expiration_year = $fundraiser_fields['card_expiration_year'];
	$email = $fundraiser_fields['email'];

    $amount_field = 'submitted][donation][amount';
    // look for other amount
    if ($donation_amount == "other") {
      $donation_amount = $fundraiser_fields['other_amount'];
      $amount_field = 'submitted][donation][other_amount';
    }

    // Ensure we have a valid donation amount
    if (!preg_match('/^\d*(\.\d*)?$/', $donation_amount)) {
      form_set_error($amount_field, t('Donation amount must be in a valid number format. No commas and only one decimal point.'));
      $errors = true;
    }

	// check for minimum amount
	$minimum_donation_amount = db_result(db_query("select minimum_donation_amount from {fundraiser} where nid = %d", $node_id));
	$minimum_donation_amount = number_format($minimum_donation_amount, 2);
	if ($donation_amount < $minimum_donation_amount) {
		form_set_error($amount_field, "Your donation amount must be greater than or equal to $minimum_donation_amount.");
		$errors = true;
	}
	
	//validate cc number
	if (!empty($cc_number) && ((variable_get('uc_credit_validate_numbers', TRUE) && !_valid_card_number($cc_number))
 		|| !ctype_digit($cc_number))) {
   	form_set_error('submitted][credit_card_information][card_number',"You have entered an invalid credit card number.");
		$errors = true;
 	}
    
 	// Validate the card expiration date.
  if (!empty($cc_expiration_month) && !empty($cc_expiration_year) && !_valid_card_expiration($cc_expiration_month, $cc_expiration_year)) {
  	form_set_error('submitted][credit_card_information][expiration_date][card_expiration_month', t('The credit card you entered has expired.'));
  	form_set_error('submitted][credit_card_information][expiration_date][card_expiration_year', ' ');
		$errors = true;
  }

	// Validate the CVV Number
	if (!empty($cc_cvv) && variable_get('uc_credit_cvv_enabled', TRUE) && !_valid_cvv($cc_cvv)) {
		form_set_error('submitted][credit_card_information][card_cvv',t('You have entered an invalid CVV number.'));
		$errors = true;
	}
	
	// Validate email address
	if (!fundraiser_validate_email($email)) {
		form_set_error('email', t('You must enter a valid email address.'));
		$errors = true;
	}
	
	// create watchdog entry on validation errors
	if ($errors) {
		$base = drupal_get_path('module', 'fundraiser');
		drupal_add_js($base .'/jquery.alphanumeric.js');
		drupal_add_js($base .'/fundraiser.js');
		drupal_add_css($base . '/fundraiser-donation-form.css');
		
		$message = "The following donation form fields failed local validation:\n\n";
		$validation_errors = array_keys(form_get_errors());
		foreach($validation_errors as $field) {
			$keys = explode('][', $field);
			$message .= array_pop($keys) . "\n";
		}
	
		$fundraiser_fields['card_number'] = substr_replace($fundraiser_fields['card_number'], str_repeat('*', strlen($fundraiser_fields['card_number'])), 0);
		$fundraiser_fields['card_cvv'] = substr_replace($fundraiser_fields['card_cvv'], str_repeat('*', strlen($fundraiser_fields['card_cvv'])), 0);
	
		$message .= "\n\nSubmitted Values:\n\n";
		foreach($fundraiser_fields as $key => $value) {
			$message .= $key . ': ' . $value . "\n";
		}
	    fundraiser_track_local_failure();
		watchdog('fundraiser', $message, NULL, WATCHDOG_DEBUG, NULL);
	}
}

/**
 * Submission handler for donation forms.
 */
function fundraiser_webform_submit($form, &$form_state) {
  global $user;
  
  $node = $form['#parameters'][2];
	$fundraiser_fields = _fundraiser_array_flatten($form_state['values']['submitted_tree']);
	$node_id = $form_state['values']['details']['nid'];
	
	// pick out the values we need to generate an order
	$donation_amount = $fundraiser_fields['amount'];
	$cc_number = $fundraiser_fields['card_number'];
	$cc_cvv = $fundraiser_fields['card_cvv'];
	$cc_expiration_month = $fundraiser_fields['card_expiration_month'];
	$cc_expiration_year = $fundraiser_fields['card_expiration_year'];
	$first_name = $fundraiser_fields['first_name'];
	$last_name = $fundraiser_fields['last_name'];
	// Trim the whitespace on the mail field.
	$email = trim($fundraiser_fields['email']);
	$billing_address = $fundraiser_fields['address'];
	$billing_address_2 = $fundraiser_fields['address_line_2'];
	$billing_city = $fundraiser_fields['city'];
	$billing_country = $fundraiser_fields['country'];
	$billing_state = $fundraiser_fields['state'];
	$billing_zipcode = $fundraiser_fields['zip'];
	$quantity = $fundraiser_fields['quantity'];
	
	// lets jump through some hoops to see if this was a recurring donation
	$recurs = FALSE;
	$recurs_cid = db_result(db_query("SELECT cid FROM {webform_component} WHERE form_key = 'recurs_monthly' AND nid = %d", $node->nid));
	if (!empty($recurs_cid)) {
    $value = $form_state['values']['submitted'][$recurs_cid];
    if (is_array($value)) { // if this is an array, then it is a single item checkbox
      $recurs = $value[0] == 'recurs' ? TRUE : FALSE;
    }
    else {
      $recurs = $value == 'recurs' ? TRUE : FALSE;
    }
	}
	// end jumping through hoops
	
	// look for other amount
	if ($donation_amount == "other") {
		$donation_amount = $fundraiser_fields['other_amount'];
	}

  // create a new order
 	$order = uc_order_new($user->uid);
 	$order->products[0] = uc_product_load($node);
 	$order->products[0]->price = $donation_amount;
 	$order->products[0]->qty = empty($quantity) ? 1 : $quantity;
 	$order->products[0]->title = $node->title;
	$order->products[0]->nid = $node_id;
	$order->products[0]->data = array(
		'shippable' => $order->products[0]->shippable,
		'model' =>  $order->products[0]->model,
		'varprice' => $donation_amount,
		'module' => 'uc_product',
	);
	
	// multiple amount by quantity if available
	if (!empty($quantity)) {
		$donation_amount = $donation_amount * $quantity;
	}
	
	// set order properties
 	$order->primary_email = $email;
 	$order->order_total = $donation_amount;
 	$order->billing_first_name = $first_name;
 	$order->billing_last_name = $last_name;
 	$order->billing_city = $billing_city;
 	$order->billing_street1 = $billing_address;
 	$order->billing_street2 = $billing_address_2;
 	$order->billing_postal_code = $billing_zipcode;
 	$order->billing_zone = $billing_state;
 	$order->billing_country = $billing_country;
 	$order->payment_method = 'credit';
 	$order->payment_details = array(
 		'cc_type' => _fundraiser_get_cc_type($cc_number),
 		'cc_owner' => '',
 		'cc_number' => $cc_number,
 		'cc_start_month' => '',
 		'cc_start_year' => '',
 		'cc_exp_month' => $cc_expiration_month,
 		'cc_exp_year' => $cc_expiration_year,
 		'cc_issue' => '',
 		'cc_cvv' => $cc_cvv,
 		'cc_bank' => '',
 	);

 	$order->line_items = array();


  $order->data['recurring_status'] = $recurs ? DONATION_RECURRING : DONATION_NON_RECURRING;
  
 	// Allow other modules to add additional fields to the order before processing the payment
  $additional_order_fields = module_invoke_all('fundraiser_add_order_fields', $fundraiser_fields);
  foreach ($additional_order_fields as $field => $value) {
    $order->data[$field] = $value;
  }
  
  // Store the gateway that was used to make the payment
  $order->data['gateway'] = $node->gateway;
  
 	// cache the cc details stored by the handler.
  uc_credit_cache('save', $order->payment_details, FALSE);
 	
 	// allow other modules to alter the order before it is save
  module_invoke_all('fundraiser_order_created', $order, $fundraiser_fields, $form_state['values']['details']['sid']);
 	
 	// save the order
 	uc_order_save($order);

  // grab the donation form url
  $donation_form_url = _fundraiser_donation_form_path($node->nid);

  // relate the order to submission before we try and process the payment
  db_query(
    "INSERT INTO {fundraiser_webform_order}
      (webform_nid, order_id, sid, recurring_status, user_agent, form_url) VALUES (%d, %d, %d, %d, '%s', '%s')
    ;",
    $node->nid, $order->order_id, $form_state['values']['details']['sid'],
    $order->data['recurring_status'], $_SERVER['HTTP_USER_AGENT'], $donation_form_url
  );
  
  // additional data to pass to the payment gateway's charge function
  $data = array(
    'txn_type' => 'auth_capture',
  );

  if (isset($form_state['fundraiser_reference_txn']) && isset($form_state['fundraiser_reference_txn_id'])) {
    $data = array(
      'txn_type' => 'reference_txn',
      'ref_id' => $form_state['fundraiser_reference_txn_id']
    
    );
  }
 	
 	// variable to hold the name of the payment gateway charge function we need to call
 	$charge_function = NULL;
    $payment_gateway = module_invoke_all('fundraiser_gateway', 'charge function', $node->gateway);
    $charge_function = $payment_gateway['charge_function'];
    // If additional config options were passed include them
    if (!empty($payment_gateway['config'])) {
      $data['config'] = $payment_gateway['config'];
    }

    if ($charge_function) {
      // call the charge function and store the result
      $result = $charge_function($order->order_id, $donation_amount, $data);
    }

 	if ($result['success']) {
 	  fundraiser_order_accept($order->order_id, $result['data']['txn_id'], $result['message'], $result['data']['auth_code']);
 	  $node = node_load(array('nid' => $node_id));
 	  module_invoke_all('fundraiser_webform_submit', $order, $node, $form_state);
 	}
 	else {
		// failed to process credit cart
		fundraiser_order_decline($order->order_id, $result['message']);
		fundraiser_track_gateway_failure();
		// tell webform we're not done and rebuild the form
		unset($form_state['values']['details']['sid']);
		form_set_error('credit_card_information][card_number', $result['message']);
		$form_state['values']['details']['finished'] = 0;
		$form_state['rebuild'] = TRUE;
 	}
}

/**
 * Completes the processing of an accepted order.
 *
 * @param $order_id
 *   The id of the order.
 * @param $transaction_id
 *   The id of the transaction that was returned from the gateway.
 * @param $message
 *   Any message that was returned by the gateway.
 *
 * @param $auth_code
 * Authorization code returned by the payment gateway.
 */
function fundraiser_order_accept($order_id, $transaction_id, $message = NULL, $auth_code = '') {
  // reload the order
  $order = uc_order_load($order_id);
  
  module_invoke_all('fundraiser_order_success', $order);

  fundraiser_track_conversion();
  
  // use order_id to find the nid and then go ahead and load up the node
  $webform = db_fetch_object(db_query("SELECT webform_nid, sid, recurring_status FROM {fundraiser_webform_order} WHERE order_id = %d", $order_id));
  $node = node_load($webform->webform_nid);
  
  // complete the sale
  uc_cart_complete_sale($order, variable_get('uc_new_customer_login', FALSE));
  
  // enter the payment
  uc_payment_enter($order_id, 'fundraiser', $order->order_total, 0, NULL, t('Payment processed by the fundraiser module.'));
	
	// mark payment as received
  db_query("UPDATE {uc_orders} SET order_status = '%s' WHERE order_id = %d", 'payment_received', $order_id);
  
  // update the order/webform relationship
  db_query("UPDATE {fundraiser_webform_order}
    SET
      gateway = '%s',
      txn_id = '%s',
      auth_code = '%s'
    WHERE
      order_id = %d",
    $node->gateway, $transaction_id, $auth_code, $order_id);
  
  // update the uid on the webform submission
  db_query("UPDATE {webform_submissions} SET uid = %d WHERE sid = %d", $order->uid, $webform->sid);
  
  // Update the recurring status, if it was changed by the payment gateway module
  if ($webform->recurring_status != $order->data['recurring_status']) {
    db_query('UPDATE {fundraiser_webform_order} SET recurring_status = %d WHERE order_id = %d', $order->data['recurring_status'], $order_id);
  }
    
  // update the user's profile
  fundraiser_update_user_profile($order->uid, $webform->webform_nid, $webform->sid);
    
  // if it's recurring, spawn all the future orders
  if (fundraiser_is_recurring_order($order_id)) {
    fundraiser_create_future_orders($order_id, $node->gateway);
  }
  
  // TODO: This should be changed to a hook (hook_donation_successful) and another module can put it in the queue.
  fundraiser_add_to_queue($order);
  
  // show gateay message if appropriate
  $display_message = variable_get('fundraiser_gateway_messages', 1);
  if ($display_message) {
 	  drupal_set_message($message);
  }
}

/**
 * Completes the processing of an declined order.
 *
 * @param $order_id
 *   The id of the order.
 * @param $message
 *   Any message that was returned by the gateway.
 */
function fundraiser_order_decline($order_id, $message) {
  
  module_invoke_all('fundraiser_order_failure', $order_id);

  
  // make the order as failed
  db_query("UPDATE {uc_orders} SET order_status = 'failed' WHERE order_id = %d", $order_id);

  // make a log entry
  watchdog('fundraiser', t('Order !id was declined by the payment gateway. Reason: @message', array('!id' => $order_id, '@message' => $message)), NULL, WATCHDOG_DEBUG, NULL);
  
  // clean up
  $sid = db_result(db_query("SELECT sid FROM {fundraiser_webform_order} WHERE order_id = %d", $order_id));
  db_query("DELETE FROM {fundraiser_webform_order} WHERE order_id = %d", $order_id);
  db_query("DELETE FROM {webform_submitted_data} WHERE sid = %d", $sid);
  db_query("DELETE FROM {webform_submissions} WHERE sid = %d", $sid);
  
  // show gateay message if appropriate
  $display_message = variable_get('fundraiser_gateway_messages', 1);
  if ($display_message) {
    drupal_set_message($message);
  }
}

/**
 * Completes the processing of an order when an error occurs.
 *
 * @param $order_id
 *   The id of the order.
 * @param $message
 *   Any message that was returned by the gateway.
 */
function fundraiser_order_exception($order_id, $message) {
  // make the order as failed
 	db_query("UPDATE {uc_orders} SET order_status = 'failed' WHERE order_id = %d", $order_id);
 	// make a log entry
 	watchdog('fundraiser', t('An error occurred while processing order !id. Error: @message', array('!id' => $order_id, '@message' => $message)), NULL, WATCHDOG_ERROR, NULL);
  
  // show gateay message if appropriate
  $display_message = variable_get('fundraiser_gateway_messages', 1);
  if ($display_message) {
    drupal_set_message($message);
  }
}

/**
 * Completes the processing of an order when it is cancelled by the user.
 *
 * @param $order_id
 *   The id of the order.
 * @param $message
 *   Any message that was returned by the gateway.
 */
function fundraiser_order_cancel($order_id) {
  // make the order as canceled
 	db_query("UPDATE {uc_orders} SET order_status = 'canceled' WHERE order_id = %d", $order_id);
  // make a comment on the order
  uc_order_comment_save($order_id, 0, t('Payment was canceled during checkout by the user.'));
  // make a log entry
  watchdog('fundraiser', t('Order !id was canceled by the user.', array('!id' => $order_id)), NULL, WATCHDOG_DEBUG, NULL);
  
  // show gateay message if appropriate
  $display_message = variable_get('fundraiser_gateway_messages', 1);
  if ($display_message) {
    drupal_set_message(t('Your payment has been canceled'));
  }
}

/**
 * Adds an order to the Salesforce queue.
 *
 * @param $order
 *   The order to add to the queue.
 */
function fundraiser_add_to_queue($order) {
  // TODO: This should really be moved to the SF Donation module where it can listen for new orders being created.
  $add_to_queue = (module_exists('queue_api')) ? TRUE : FALSE;
 		
	if ($add_to_queue) {
  	if (fundraiser_is_recurring_order($order->order_id)) {
      sf_queue_insert($order->order_id, FUNDRAISER_RECURRING_DONATION_TYPE, 'create');
    }
    else {
      sf_queue_insert($order->order_id, FUNDRAISER_SINGLE_DONATION_TYPE, 'create');
    }
  }
}


/**
 * Handles the final destination redirect (even after webform).
 */
function fundraiser_confirmation($form, &$form_state) {
  // everything is good, lets do our redirect
  $node = $form['#node'];
  $sid = $form_state['values']['details']['sid'];
  $redirect_url = trim($node->redirect_url);
  
  // Remove the domain name from the redirect.
  $redirect_url = preg_replace('/^' . preg_quote($GLOBALS['base_url'], '/') . '\//', '', $redirect_url);
  
  if ($redirect_url == '<confirmation>') {
    $redirect = array('node/' . $node->nid . '/confirmation', 'sid=' . $sid);
  }
  elseif (valid_url($redirect_url, TRUE)) {
    $redirect = $redirect_url;
  }
  elseif ($redirect_url && strpos($redirect_url, 'http') !== 0) {
    $parts = parse_url($redirect_url);
    $query = $parts['query'] ? ($parts['query'] . '&sid=' . $sid) : ('sid=' . $sid);
    $redirect = array($parts['path'], $query, $parts['fragment']);
  }
  
  $form_state['redirect'] = $redirect;
}

/**
 * Determines if an order is a recurring order.
 *
 * @param $order_id
 *   The order id to check.
 */
function fundraiser_is_recurring_order($order_id) {
  $status = db_result(db_query("SELECT recurring_status FROM {fundraiser_webform_order} WHERE order_id = %d", $order_id));
  return $status == DONATION_RECURRING;
}

/**
 * Updates the profile of user that submitted the donation.
 *
 * @param $uid
 *   The id of the user that made the donation.
 * @param $nid
 *   The nid of the webform node.
 * @param $sid
 *   The id of the webform submission that contains the values.
 */
function fundraiser_update_user_profile($uid, $nid, $sid) {
  global $user;
  $update_user = $user;
  $map = fundraiser_create_profile_values_map($nid, $sid);
  		
	if ($user->uid == 0) {
		$update_user = user_load($uid);
	}
  
  // make sure the profile module is enabled
	if (module_exists('profile')) {
		$cat_array = profile_categories();
	
		foreach ($cat_array as $cat) {
			$updates = array(); // array for storing updates to each profile category
			$result = _fundraiser_profile_get_fields($cat['name']);
			while ($row = db_fetch_array($result)) {
				if (array_key_exists($row['name'], $map)) {
					$updates[$row['name']] = $map[$row['name']];
				}
			}
			// save profile
			_fundraiser_profile_save_profile($updates, $update_user, $cat['name']);
		}
		// convert ubercart's numeric ids to textual values
		module_load_include('inc', 'webform', 'includes/webform.submissions');
		$submission = webform_get_submission($nid, $sid);
		_fundraiser_update_profile_location($submission, $update_user);
	}
	
	// update last_updated date so user will be re-synced on next cron run
	user_save($update_user, array('last_updated' => time()));

	// insert user back into queue
	$action = 'update';
	if (empty($update_user->salesforce_contact_id)) {
		$action = 'upsert';
	}
	
	// If the SF Queue API is enabled, insert this user into the queue
	if (module_exists('queue_api')) {
	  sf_queue_insert($update_user->uid, 'user', $action);
	}
	
}

/**
 * Creates a map of profile fields with their corrosponding values.
 *
 * @param $nid
 *   The nid of the webform node.
 * @param $sid
 *   The id of the webform submission that contains the values.
 */
function fundraiser_create_profile_values_map($nid, $sid) {
  $map = array();
  $mapped_fields = db_query("SELECT f.map_id, d.data FROM {fundraiser_component_map} f INNER JOIN {webform_submitted_data} d on d.cid = f.cid WHERE f.nid = %d and d.sid = %d", $nid, $sid);
  
  // create an array in the format of profile_field => value
  while ($row = db_fetch_object($mapped_fields)) {
    $map[$row->map_id] = $row->data;
  }

  return $map;
}

/**
 * Extends a current recurring donation series out to a new credit card expiration date.
 */
function fundraiser_extend_future_orders($order_id, $exp_month, $exp_year) {
  // determine the date of the last order, and the number of orders to create out to the new expiration date
  $exp = $exp_year . sprintf("%02d", $exp_month)  ;
  $result = db_query("SELECT max(order_id) as last_order_id, max(next_charge) as last_charge_date, period_diff(%d, date_format(from_unixtime(max(next_charge)),'%Y%m')) as new_order_count FROM {fundraiser_recurring} WHERE master_order_id = %d", $exp, $order_id);
  
  while ($data = db_fetch_object($result)) {
    $last_order_id = $data->last_order_id;
    $last_charge_date = $data->last_charge_date;
    $new_order_count = $data->new_order_count;
  }

  // load up the last order since it will have the most recent changes
  $order = uc_order_load($last_order_id);
  $gateway = db_result(db_query("SELECT gateway FROM {fundraiser_recurring} WHERE order_id = %d", $last_order_id));
  for ($i = 1; $i <= $new_order_count; $i++) {
    $new_order_id = fundraiser_clone_order($order);
    $charge_date = strtotime("+$i months", $last_charge_date);
		db_query("INSERT INTO {fundraiser_recurring} (master_order_id, order_id, next_charge, gateway) VALUES (%d, %d, '%s', '%s')", $order_id, $new_order_id, $charge_date, $gateway);
		uc_order_comment_save($new_order_id, 0, t('Payment will be processed on !date.', array('!date' => date('n/j/Y', $charge_date))), 'admin');
		// add these new orders to the queue
		if (module_exists('sf_donation') && module_exists('queue_api')) {
      sf_queue_insert($new_order_id, FUNDRAISER_SINGLE_DONATION_TYPE, 'create');
      sf_queue_insert($order_id, FUNDRAISER_RECURRING_DONATION_TYPE, 'update');
    }
  }
}

/**
 * Returns a duplicate of a given order
 */
function fundraiser_clone_order($order) {
  $cloned_order = uc_order_new($order->uid);
  $id = $cloned_order->order_id;
  $cloned_order = clone $order;
  $cloned_order->order_id = $id;
  $cloned_order->order_status = RECURRING_DONATION_STATUS;
  unset($cloned_order->products[0]->order_product_id);
  uc_order_save($cloned_order);
  return $cloned_order->order_id;
}

/**
 * Creates future order based on the the order's credit card expiration date.
 */
function fundraiser_create_future_orders($order_id, $gateway = NULL) {
	global $user;
	
	// reload the original order so we get any changes that have been made by the payment gateways
	$order = uc_order_load($order_id);

	// determine the number of future donations (Salesforce hard limit is 50. Set as 49 because original order is 1)
	$counter = min(_fundraiser_months_between_dates($order->payment_details['cc_exp_month'], $order->payment_details['cc_exp_year']), 49);
	
  // grab the donation form url
  $donation_form_url = _fundraiser_donation_form_path($order->products[0]->nid);

	for($i = 1; $i <= $counter; $i++) {
		$next_order = uc_order_new($user->uid);
		// copy all values to new order
		$new_id = $next_order->order_id;
		$next_order = clone $order;
		$next_order->order_id = $new_id;
		$next_order->order_status = 'pending_future_payment';
		
		unset($next_order->products[0]->order_product_id);
		uc_order_save($next_order);
		$next_charge = strtotime("+$i months");
		
		// make a record of the recurring order
		db_query("INSERT INTO {fundraiser_recurring} (master_order_id, order_id, next_charge, gateway, form_url) VALUES (%d, %d, '%s', '%s', '%s')", $order_id, $new_id, $next_charge, $gateway, $donation_form_url);
		
		// add a comment to the order stating when it will be charged
		uc_order_comment_save($new_id, 0, t('Payment will be processed on !date.', array('!date' => date('n/j/Y', $next_charge))), 'admin');
	}
	
}

/**
 * Submits recurring donations for payment
 */
function fundraiser_process_recurring_donations() {
  
  $successes = 0;
  $fails = 0;

  $uni_batch_id = uniqid();
	$orders_to_process = db_query("SELECT * FROM {fundraiser_recurring} WHERE next_charge < %d AND
		(gateway_resp IS NULL OR gateway_resp = 'failed') AND attempts < 3 AND lock_id = '0'", time());
  db_query("UPDATE {fundraiser_recurring} SET lock_id = '%s' WHERE next_charge < %d AND
		(gateway_resp IS NULL OR gateway_resp = 'failed') AND attempts < 3 AND lock_id = '0'", $uni_batch_id, time());

	// loop over the found orders
	while ($order_info = db_fetch_array($orders_to_process)) {
		$order_id = $order_info['order_id'];
		$order = uc_order_load($order_id);
		$total = $order->order_total;
    
    // varaible to hold the name of the payment gateway charge function we need to call
   	$charge_function = NULL;
   	
   	// get the id of the reference to the customers cc data
		$ref_id = array_shift(array_keys($order->data['cc_txns']['references']));
		$data = array(
  		'txn_type' => 'reference_txn',
			'ref_id' => $ref_id,
  	);
   	
   	$charge_function = _fundraiser_charge_function($order_id, $order->products[0]->nid, $data);
   	
   	if (empty($charge_function)) {
      db_query("UPDATE {fundraiser_recurring} SET lock_id = '0' WHERE order_id = %d", $order_id); // Reset lock back to 0 for retry.
   	  watchdog('fundraiser', t('Cannot determine the payment gateway for order !id. Node id of donation form is !nid', array('!id' => $order->order_id, '!nid' => $order->products[0]->nid)), NULL, WATCHDOG_CRITICAL);
   	}
   	else {
  		// process the order
  	  $result = $charge_function($order_id, $total, $data);
  		if ($result['success']) {
  			$successes++;
  			uc_payment_enter($order_id, 'fundraiser_recurring', $total, 0, NULL, 'Submitted for payment via cron run.');
  			uc_order_comment_save($order_id, 0, t('Submitted for payment via cron run. Transaction Id: @txn_id', array('@txn_id' => $result['data']['txn_id'])), 'admin');
  		  db_query("UPDATE {uc_orders} SET order_status = 'payment_received' WHERE order_id = %d", $order_id);
  			db_query("UPDATE {fundraiser_recurring} SET gateway_resp = 'success', txn_id = '%s', auth_code = '%s' WHERE order_id = %d", $result['data']['txn_id'], $result['data']['auth_code'], $order_id);
  
        // Send credit card notification email when only a single payment is left
        if (fundraiser_recurring_payments_remaining($order_info['master_order_id']) == 1) {
          fundraiser_send_cc_notification($order_info['master_order_id'], $order->uid);
        }
   
  			// Check for Salesforce Fundraiser module and update order status
  			if (module_exists('sf_donation')) {
  				sf_queue_insert($order->order_id, FUNDRAISER_SINGLE_DONATION_TYPE, 'update');
  			}
  		}
  		else {
  			$fails++;
  			db_query("UPDATE {uc_orders} SET order_status = 'failed' WHERE order_id = %d", $order->order_id);
  			db_query("UPDATE {fundraiser_recurring} SET
  				gateway_resp = 'failed',
  				attempts = attempts + 1,
  				next_charge = unix_timestamp(timestampadd(DAY, 1, from_unixtime(next_charge))),
  				lock_id = '0'
  				WHERE order_id = %d", $order_id
  			);
  			// get the number of times this order has been attempted
  			$attempt_count = db_result(db_query("SELECT attempts FROM {fundraiser_recurring} WHERE order_id = %d", $order->order_id));
  			if ($attempt_count == 3) {
  				// final attempt. add debug alert
  				watchdog('fundraiser', t('Payment for recurring donation !id has failed 3 times. The order will not be submitted for payment again. Gateway message: !message', array('!id' => $order->order_id, '!message' => $result['message'])), NULL, WATCHDOG_DEBUG);
  			}
  			else {
  				// log this failure
  				watchdog('fundraiser', t('Payment for recurring donation !id has failed !attempts times. It will be processed again in 1 day. Gateway message: !message', array('!id' => $order->order_id, '!attempts' => $attempt_count, '!message' => $result['message'])), NULL, WATCHDOG_DEBUG);
  			}
  			// fire sustainer payment failure trigger
  			module_invoke_all('fundraiser', 'sustainer_payment_declined', $order);
  		}
  		// clear the credit card cache between orders
  		uc_credit_cache('clear');
  	}
  }
  
  if ($successes > 0 || $fails > 0) {
    watchdog('fundraiser', '!successes recurring fees processed successfully; !fails failed.', array('!successes' => $successes, '!fails' => $fails));
  }
}

/**
 * Returns the number of unprocessed payments for a recurring donation series.
 */
function fundraiser_recurring_payments_remaining($master_order_id) {
  return db_result(db_query("SELECT count(order_id) FROM fundraiser_recurring WHERE master_order_id = %d AND gateway_resp IS NULL", $master_order_id));
}

/**
 * Kicks of an email to a sustainer to remind them their credit card is about to expire.
 */
function fundraiser_send_cc_notification($master_order_id, $uid) {
  $user = user_load($uid);
  // load the last remaining order so we can get some info for the email
  $order_id = db_result(db_query("SELECT order_id FROM fundraiser_recurring WHERE master_order_id = %d AND gateway_resp IS NULL", $master_order_id));
  $order = uc_order_load($order_id);
  
  // set up some params that can be used in the email
  $params['exp_month'] = $order->payment_details['cc_exp_month'];
  $params['exp_year'] = $order->payment_details['cc_exp_year'];
  $params['cc_last_4'] = substr($order->payment_details['cc_number'], -4);
  $params['cc_type'] = $order->payment_details['cc_type'];
  $params['amount'] = $order->order_total;
  $params['order_id'] = $order_id;
  $params['user'] = $user;
  $params['master_order_id'] = $master_order_id;
  
  watchdog('fundraiser', t('Credit card expiration email sent to @mail', array('@mail' => $user->mail)), NULL, WATCHDOG_INFO);
  drupal_mail('fundraiser', 'fundraiser_cc_notification', $user->mail, user_preferred_language($user), $params);
}

/**
 * Implemenation of hook_mail().
 */
function fundraiser_mail($key, &$message, &$params) {
  switch ($key) {
    case 'fundraiser_cc_notification':
      $body = variable_get('fundraiser_cc_exp_body', 'Your card ending in [cc_last_4] is about to expire on [exp_month]/[exp_year].');
      // do some token replacements
      $tokens = array('[exp_month]', '[exp_year]', '[cc_type]', '[cc_last_4]', '[amount]');
      $replaces = array($params['exp_month'], $params['exp_year'], $params['cc_type'], $params['cc_last_4'], $params['amount']);
      $body = str_replace($tokens, $replaces, $body);
       // replace any user tokens via the token module
      $body = token_replace($body, 'user', $params['user']);
      
      $message['subject'] = variable_get('fundraiser_cc_exp_subject', 'Your credit card is about to expire');
      $message['body'] = $body;
      break;
  }
}

/**
 * Implementation of hook_order().
 */
function fundraiser_order($op, &$arg1, $arg2) {
  switch ($op) {
    case 'delete':
      // remove the order from fundraiser tables
      db_query("DELETE FROM {fundraiser_recurring} WHERE order_id = %d", $arg1->order_id);
      break;
  }
}

/**
 * Implementation of hook_order_pane().
 */
function fundraiser_order_pane() {
  $panes[] = array(
    'id' => 'fundraiser',
    'callback' => 'fundraiser_order_pane_fundraiser',
    'title' => t('Fundraiser'),
    'desc' => t('Additional data for donation orders.'),
    'class' => 'abs-left',
    'weight' => 7,
    'show' => array('view', 'edit'),
  );
  return $panes;
}

/**
 * Order pane callback.
 */
function fundraiser_order_pane_fundraiser($op, $arg1) {
  switch ($op) {
    case 'view':
      $order_id = $arg1->order_id;
      // query for a webform order record either for this order id or for its master order if it's a
      // recurrance of a recurring donation
      $submission = db_fetch_object(db_query(
        "SELECT wo.webform_nid, wo.sid, r.master_order_id
          FROM {fundraiser_webform_order} wo
            LEFT JOIN {fundraiser_recurring} r ON r.master_order_id = wo.order_id
          WHERE %d IN (wo.order_id, r.order_id)
        ;",
        $order_id
      ));
      if ($submission) {
        $output['webform-submission'] = array(
          '#value' => l(
            t('Donation form submission'),
            "node/$submission->webform_nid/submission/$submission->sid"
          ),
          '#prefix' => '<p>',
          '#suffix' => '</p>',
          '#weight' => 1
        );
        if ($submission->master_order_id) {
          $output['master-order'] = array(
            '#value' => l(
              t('Master order for recurring donations'),
              "admin/store/orders/$submission->master_order_id"
            ),
            '#prefix' => '<p>',
            '#suffix' => '</p>',
            '#weight' => 2,
          );
        }
      }
      return drupal_render($output);
  }
}

/**
 * Implemenation of hook_mail_alter().
 *
 * Change the from address and subject for donation receipt emails.
 */
function fundraiser_mail_alter(&$message){
	$parts = explode("/",$_GET['q']);
	$nid = $parts[1];
	$node = node_load($nid);
	
	if ($message['id'] == 'uc_order_action-mail') {
		$message['headers']['From'] = $headers['Sender'] = $headers['Return-Path'] = $headers['Errors-To'] = $node->receipt_email_from . ' <' .$node->receipt_email_address . '>';
    $bcc = variable_get('fundraiser_receipt_bcc', '');
    if (!empty($bcc)) {
      $message['headers']['Bcc'] = $bcc;
    }

		$message['from'] = $node->receipt_email_from . ' <' .$node->receipt_email_address . '>';
		$message['subject'] = $node->receipt_email_subject;
	}
}

 /**
 * Implementation of hook_preprocess_uc_order().
 *
 * Adds additional variables for use in donation receipt emails.
 *
 */
function fundraiser_preprocess_uc_order(&$variables) {
  switch ($variables['op']) {
    case 'checkout-mail':
      $nid = $variables['order']->products[0]->nid;
      $message = db_result(db_query("SELECT receipt_email_message FROM {fundraiser} WHERE nid = %d", $nid));
      $variables['fundraiser_message'] = $message;
      break;
  }
}

/*
 * Support for cloning via the node clone module
 */
function fundraiser_clone_node_alter(&$node, $original_node, $method) {
	if ($method == 'prepopulate') {
		$node->internal_name = 'Clone of ' . $original_node->internal_name;
	}
}

/**
 * Implemenation of queue_report_item_name().
 */
function fundraiser_queue_report_item_title_alter(&$row) {
	if ($row['type'] == 'donation' || $row['type'] == 'recurring_donation') {
		$title = 'Order ' . $row['oid'];
		$row['title'] = $title;
	}
  elseif ($row['type'] == 'refund') {
    $order_id = db_result(db_query("SELECT order_id FROM {fundraiser_refund} WHERE refund_id = %d", $row['oid']));
    $title = 'Order ' . $order_id;
		$row['title'] = $title;
  }
}

/******************************************************************************
 * TRIGGERS
 *****************************************************************************/

/**
 * Implementation of hook_hook_info().
 */
function fundraiser_hook_info() {
	return array(
		'fundraiser' => array(
			'fundraiser' => array(
				'sustainer_payment_declined' => array(
					'runs when' => t('A sustainer\'s credit card payment is declined'),
				),
		  ),
		),
	);
}

/**
 * Implementation of hook_fundraiser().
 */
function fundraiser_fundraiser($op, $order) {
  if (module_exists('trigger')) {
    $aids = _trigger_get_hook_aids('fundraiser', $op);
    $context = array(
      'hook' => 'fundraiser',
      'op' => $op,
      'order' => $order,
    );
  	$dummy = new stdClass();
    actions_do(array_keys($aids), $dummy, $context);
  }
}

/**
 * Implementation of hook_drupal_alter().
 */
function fundraiser_action_info_alter(&$info) {
  if (isset($info['token_actions_send_email_action']['hooks']['fundraiser'])) {
    array_merge($info['token_actions_send_email_action']['hooks']['fundraiser'], array('sustainer_payment_declined'));
  }
  else {
    $info['token_actions_send_email_action']['hooks']['fundraiser'] = array('sustainer_payment_declined');
  }
}
/**
 * Implemenation of hook_webform_select_options_info().
 */
function fundraiser_webform_select_options_info() {
  $items = array();
  include 'includes/fundraiser.options.inc';
  return _fundraiser_webform_select_options_info();
}

/**
 * Loads the recurring donation processor key.
 *
 * @return FALSE if no key is found or the key domain does not match the current domain.
 */
function fundraiser_processor_key_match() {
  static $key;

  if (!empty($key)) {
    return ($key == $_SERVER['HTTP_HOST']);
  }

  $dir = variable_get('uc_credit_encryption_path', t('Not configured, see below.'));
  if (!empty($dir) && $dir !== t('Not configured, see below.')) {
    $filename = rtrim($dir, '/\\') .'/sustainer.key';

    if (file_exists($filename)) {
      if (!$file = fopen($filename, 'r')) {
        return FALSE;
      }

      $key = fread($file, filesize($filename));
      if (trim($key) != trim($_SERVER['HTTP_HOST'])) {
        return FALSE;
      }
      fclose($file);
    }
    else {
      return FALSE;
    }
  }
  else {
    return FALSE;
  }

  return TRUE;
}


/**
 * Implementation of hook_order_actions().
 * Add a refund action to the Order list
 */
function fundraiser_order_actions($order) {
  if (user_access('edit orders') && (in_array($order->order_status, array('payment_received', 'partially_refunded')) || empty($order->order_status)) && fundraiser_gateway_can_refund_order($order)) {
    $module_path = base_path() . drupal_get_path('module', 'fundraiser');
    $title = t('Issue refund on order !order_id.', array('!order_id' => $order->order_id));
    $actions[] = array(
      'name' => t('Refund'),
      'url' => 'admin/store/orders/'. $order->order_id .'/refund',
      'icon' => '<img src="'. $module_path .'/images/refund.gif" alt="'. $title .'" />',
      'title' => $title,
    );
    return $actions;
  }
}

/**
* Implementation of hook_theme().
*/
function fundraiser_theme() {
  return array(
    'fundraiser_mapping_form' => array(
    'arguments' => array(),
    ),
    'sustainer_management_page' => array(
      'template' => 'sustainer-management-page',
      'arguments' => array('order_id' => null, 'orders' => null, 'payment_info' => null, 'billing_info' => null, 'amount_form' => null, 'billing_form' => null, 'cancel_form' => null, 'payment_schedule' => null, 'cancelled' => FALSE),
    ),
    'fundraiser_credit_card_expiration_date' => array(
      'arguments' => array(),
    ),
    'fundraiser_confirmation' => array(
      'arguments' => array('node' => NULL, 'sid' => NULL),
      'template' => 'templates/fundraiser-confirmation',
      'pattern' => 'fundraiser_confirmation_[0-9]+',
    ),
    'fundraiser_confirmation_tokens' => array(
      'arguments' => array('tokens' => NULL),
      'template' => 'templates/fundraiser-token-list',
    ),
  );
}

/**
 * Theme the credit card expiration date form field.
 */
function theme_fundraiser_credit_card_expiration_date($element) {
  $element['card_expiration_month']['#title'] = t('Expiration Date');
  $month = drupal_render($element['card_expiration_month']);
  $element['card_expiration_year']['#title'] = '';
  $year = drupal_render($element['card_expiration_year']);
  
  preg_match('#<select.*/select>#ms', $year, $matches);
  $month = str_replace('</select>', "</select>$matches[0]", $month);
  
  $expiration_date = "<div class='expiration-date-wrapper clear-block'>$month</div>";
  return $expiration_date . drupal_render($element); // Always end any form theming with drupal_render() for cleanup.
}

/**
 * Theme Fundraiser mapping form.
 */
function theme_fundraiser_mapping_form($form) {
	if ($form['mapping']['cid']) {
		foreach ($form['mapping']['cid'] as $key=>$cid) {
			if (is_numeric($key)) {
				$row = array();
				$row[] = drupal_render($form['mapping']['cid'][$key]);
				$row[] = drupal_render($form['mapping']['type'][$key]);
				$rows[] = $row;
			}
		}
		$row = array();
		$row[] = drupal_render($form['submit']);
		$row[] = '&nbsp;';
		$rows[] = $row;
	
		$header = array("Webform Component","Profile Field");
		$output = drupal_render($form['info']);
		$output .= theme('table', $header, $rows, array('id' => 'fundraiser_mapping_form'));
		$output .= drupal_render($form);
	}
	else {
		$output = "<p>You must add some fields to the webform before you can map them.</p>";
	}
	return $output;
}

/**
 * Callback handler for the donation ask amount form #ahah.
 */
function _fundraiser_ask_ahah() {
  module_load_include('inc', 'node', 'node.pages');
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  $amount_delta = $form_state['values']['amount_delta'];
  $form = form_get_cache($form_build_id, $form_state);
  
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  // Disable validation
  $form['#validate'] = NULL;
  $form_state['validate_handlers'] = NULL;
  fundraiser_ahah_helper_disable_validation($form);
  
  drupal_process_form($form_id, $form, $form_state);
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
  $amount_form = $form['fundraiser_settings']['amount_wrapper']['amounts'];
  unset($amount_form['#prefix'], $amount_form['#suffix']);
 
  $output = theme('status_messages') . drupal_render($amount_form);

  $form_state = array('submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  drupal_json(array('status' => TRUE, 'data' => $output));
}

/**
 * Generate donation ask amount fields, used by donation form #ahah
 *
 * @param $delta
 * Expects an integer value, used for namespacing individual sets of fields.
 *
 * @param $edit
 * Node $edit array.
 *
 * @param $amount_values
 * An array of donation amounts taken from {webform_component}.
 *
 *  @return
 *  Returns ask, label and remove form elements namespaced by delta.
 */
function _fundraiser_ask_form($delta, $edit, $amount_values = array()) {

  // Workaround for bogus blank fields being added if user first deletes a set or sets before adding a set.
  if (!$edit['post']['amount_' . $delta] && $delta < $edit['values']['amount_delta'] - 1) {
    return FALSE;
  }
  
  $form = array();
  $fields = array(
    'amount_' => array('label' => 'Ask amount', 'size' => 10, 'class' => 'amount_field'),
    'label_' => array('label' => 'Label', 'size' => 30, 'class' => 'label_field'),
  );
  $weight = 0;
  
  foreach ($fields as $key => $value) {

    $form[$key . $delta] = array(
      '#type' => 'textfield',
      '#title' => t($value['label']),
      '#size' => $value['size'],
      '#weight' => $weight,
      '#attributes' => array('class' => $value['class']),
    );

    // Post values take precedence as they're fresh from the form. We defer to values retrieved from the DB only during
    // initial form generation.
    if (!$edit['post'] && count($amount_values)) {
      $values = explode('|', $amount_values[$delta]);
      $form[$key . $delta]['#default_value'] = $values[$weight];
      if ($values[0] == 'other') {
        return FALSE;
      }
    }
    else {
      $form[$key . $delta]['#default_value'] = $edit['post'][$key . $delta];
    }
    ++$weight;

  }

  $form['remove_' . $delta] = array(
    '#type' => 'button',
    '#value' => t('remove'),
    '#weight' => 2,
    '#suffix' => '<div class="clear-block"></div>',
  );
  return $form;
}

/**
 * Submit handler for ask amount more button.
 */
function _fundraiser_amount_ahah_submit(&$form, &$form_state) {
  unset($form_state['submit_handlers']);
  $delta = $form_state['values']['amount_delta'];
  for ($i = 0; $i < $form_state['values']['amount_delta']; ++$i) {
    if (!$form_state['values']['amount_' . $i]) {
      --$delta;
    }
  }
  ++$form_state['values']['amount_delta'];

  form_execute_handlers('submit', $form, $form_state);
  $values = $form_state['values'];
  $form_state['rebuild'] = TRUE;
}

/**
 * Utility function.
 */
function _fundraiser_array_flatten($array, $preserve_keys = 1, &$newArray = Array()) {
  foreach ($array as $key => $child) {
    if (is_array($child)) {
      $newArray =& _fundraiser_array_flatten($child, $preserve_keys, $newArray);
    } elseif ($preserve_keys + is_string($key) > 1) {
      $newArray[$key] = $child;
    } else {
      $newArray[] = $child;
    }
  }
  return $newArray;
}

/**
 * Returns the donation form's path alias.
 */
function _fundraiser_donation_form_path($nid) {
  global $base_url;
  $alias = drupal_lookup_path('alias', $_GET['q']);
  
  // if there is no alias, use the node id
  if (!empty($alias)) {
    return $base_url . '/' . $alias;
  }
  else {
    return $base_url . '/node/' . $nid;
  }
}

function _fundraiser_get_cc_type($cardnumber) {
	$cardtype = "UNKNOWN";
	$len = strlen($cardnumber);
	if ( $len == 15 && substr($cardnumber, 0, 1) == '3' ) { $cardtype = "amex"; }
	elseif ( $len == 16 && substr($cardnumber, 0, 4) == '6011' ) { $cardtype = "discover"; }
	elseif ( $len == 16 && substr($cardnumber, 0, 1) == '5' ) { $cardtype = "mc"; }
	elseif ( ($len == 16 || $len == 13) && substr($cardnumber, 0, 1) == '4' ) { $cardtype = "visa"; }
	return ( $cardtype );
}

/**
 * Version of _profile_get_fields that includes hidden profile fields by default
 */
function _fundraiser_profile_get_fields($category) {
  $sql = "SELECT * FROM {profile_fields} WHERE LOWER(category) = LOWER('%s') ORDER BY category, weight";
  return db_query($sql, $category);
}

/**
 * Version of profile_save_profile that includes hidden profile fields
 */
function _fundraiser_profile_save_profile(&$edit, &$user, $category) {
  $result = _fundraiser_profile_get_fields($category);
  while ($field = db_fetch_object($result)) {
    if (array_key_exists($field->name, $edit)) {

      if (_profile_field_serialize($field->type)) {
        $edit[$field->name] = serialize($edit[$field->name]);
      }
      db_query("DELETE FROM {profile_values} WHERE fid = %d AND uid = %d", $field->fid, $user->uid);
      db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES (%d, %d, '%s')", $field->fid, $user->uid, $edit[$field->name]);
      // Mark field as handled (prevents saving to user->data).
      $edit[$field->name] = NULL;
    }
  }
}

/**
 * Function returns months between today's datestamp and $exp_date -1
 */
function _fundraiser_months_between_dates($exp_month, $exp_year){
	$startDate = strtotime("now");
  $stopDate = mktime(0,0,0, $exp_month, 1, $exp_year);
   
  $nrmonths = ((idate('Y', $stopDate) * 12) + idate('m', $stopDate)) - ((idate('Y', $startDate) * 12) + idate('m', $startDate));
	return  $nrmonths;
}

/**
 * Gets the gateway associated with a given order. First it looks to see if the gateway has been
 * stored with the individual order. If it hasn't it uses the gateway that was assigned to the
 * donation form where the order originated.
 */
function _fundraiser_charge_function($order_id, $nid, &$data) {
  // first, see if the gateway is stored with the order
  $gateway = db_result(db_query("SELECT gateway FROM {fundraiser_recurring} WHERE order_id = %d", $order_id));

  if (empty($gateway)) {
    // get the gateway from the original donation form
    $gateway = db_result(db_query("SELECT gateway FROM {fundraiser} WHERE nid = %d", $nid));
  }

  $payment_gateway = module_invoke_all('fundraiser_gateway', 'charge function', $gateway);
  if ($payment_gateway['charge_function']) {
    return $payment_gateway['charge_function'];
  }

  return FALSE;
}


/**
 * Creates a webform specific string of donations amount to be used in the amount component
 *
 * @param $donation_amounts
 * Array of amount => label values.
 *
 * @param $show_other_amount
 * Indicates other amount field is in use by the current donation form.
 *
 * @return
 * Returns a formatted string of amount|value pairs in the format required bo {webform_component}.extra
 */
function _fundraiser_create_amount_options($donation_amounts, $show_other_amount) {
  $formatted_amounts = '';
  // Convert to nice dollar format if label isn't present.
  
  foreach($donation_amounts as $amount => $label) {

    if (!$label) {
      $formatted_amounts .= $amount .'|$'. $amount;
    }
    else {
      $formatted_amounts .= $amount . '|' . $label;
    }

    $formatted_amounts .= "\n";
  }
	
  if ($show_other_amount && count($donation_amounts)) {
    $formatted_amounts .= 'other|Other';
  }

  return $formatted_amounts;
}

/**
* Smarter version of array_merge_recursive: overwrites scalar values.
*
* This also came (like a God send) from Wim's AHAH helper module. Really, that's the
* easiest way to go, and the module works like a charm - but I wanted to get my
* head around the whole AHAH thing, and maybe you do to, or maybe you can't or don't
* want to be dependant on a different module.
*
* @see PHP Manual on: array-merge-recursive comment #82976.
*/
function _fundraiser_array_smart_merge($array, $override) {
  if (is_array($array) && is_array($override)) {
    foreach ($override as $k => $v) {
      if (isset($array[$k]) && is_array($v) && is_array($array[$k])) {
        $array[$k] = _fundraiser_array_smart_merge($array[$k], $v);
      }
      else {
        $array[$k] = $v;
      }
    }
  }
  return $array;
}

/**
 * Validate email address field.
 *
 * @param $mail
 * email address submitted by user.
 *
 * @return
 * TRUE if the address passes all validation, FALSE otherwise.
 */
function fundraiser_validate_email($mail) {
  return (eregi("^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,6}$", $mail) && filter_var($mail,  FILTER_VALIDATE_EMAIL));
}


function _fundraiser_field_blacklist() {
  return array(
    'card_number',
    'card_cvv',
    'recurs_monthly',
    'card_expiration_month',
    'card_expiration_year',
  );
}

/**
 * Determine if this form is a donation form edit form.
 *
 * @param $form_id
 *   The id of the form to check.
 * @param $form
 *   The actual form.
 */
function fundraiser_is_donation_edit_form($form_id, $form) {
  return substr($form_id, -10) == '_node_form'
    && isset($form['#node'])
    && fundraiser_is_donation_type($form['#node']->type);
}

/**
 * Determine if this node type supports donation forms.
 */
function fundraiser_is_donation_type($type) {
  static $fundraiser_types;
  // Cache fundraiser content types during page execution.
  if (!isset($fundraiser_types[$type])) {
    $fundraiser_types[$type] = variable_get('fundraiser_' . $type, FALSE);
  }
  return $fundraiser_types[$type];
}

/**
 * Helper function, returns a list of fundraiser enabled types.
 */
function fundraiser_get_donation_types() {
  static $fundraiser_types;
  // Cache types during page execution
  if (!isset($fundraiser_types)) {
    // For all types, check if they are a fundraiser type.
    $types = node_get_types();
    foreach ($types as $type => $type_info) {
      $fundraiser_types[$type] = variable_get('fundraiser_' . $type, FALSE);
    }
  }

  return $fundraiser_types;
}

/**
 * Helper function, returns an array of fundraiser types.
 */
function fundraiser_enabled_types() {
  static $fundraiser_types;

  if (!isset($fundraiser_types)) {
    $types = fundraiser_get_donation_types();
    foreach ($types as $type => $enabled) {
      if ($enabled) {
        $fundraiser_types[] = $type;
      }
    }
  }

  return $fundraiser_types;
}

/**
 * Helper function, adds node type fo webform_node_types_primary array.
 */
function fundraiser_webform_types_primary($type, $op) {
  $primary_types = variable_get('webform_node_types_primary', array('webform'));
  $types = variable_get('webform_node_types', array('webform'));

  switch ($op) {
    case 'insert':
      if (!in_array($type, $types)) {
        $types[] = $type;
        variable_set('webform_node_types', $types);
      }
      if (!in_array($type, $primary_types)) {
        $primary_types[] = $type;
        variable_set('webform_node_types_primary', $primary_types);
      }
      break;

    case 'delete':
      if (in_array($type, $types)) {
        $index = array_search($type, $types);
        unset($types[$index]);
        variable_set('webform_node_types', $types);
      }

      if (in_array($type, $primary_types)) {
        $index = array_search($type, $primary_types);
        unset($primary_types[$index]);
        variable_set('webform_node_types_primary', $primary_types);
      }
      break;
  }
}

/**
 * Keeps the tracking table up to date.
 */
function fundraiser_track_local_failure() {
  $form_nid = arg(1);
  if (db_result(db_query('SELECT 1 FROM {fundraiser_tracking} WHERE nid = %d', $form_nid))) {
    db_query('UPDATE {fundraiser_tracking} SET local_failures = local_failures + 1 WHERE nid = %d', $form_nid);
  }
  else {
    // This shouldn't happen.
    db_query('INSERT INTO {fundraiser_tracking} (nid, pageviews, local_failures, gateway_failures, latest_load_time)
      VALUES (%d, 1, 1, 0, 0)', $form_nid);
  }
  
}

function fundraiser_track_pageview() {

  $form_nid = arg(1);
  if (db_result(db_query('SELECT 1 FROM {fundraiser_tracking} WHERE nid = %d', $form_nid))) {
    db_query('UPDATE {fundraiser_tracking} SET pageviews = pageviews + 1 WHERE nid = %d', $form_nid);
  }
  else {
    // This could happen, but only if hook_exit() doesn't get invoked.
    db_query('INSERT INTO {fundraiser_tracking} (nid, pageviews, conversions, local_failures, gateway_failures)
      VALUES (%d, 1, 0, 0, 0)', $form_nid);
  }

}

function fundraiser_track_gateway_failure() {
   $form_nid = arg(1);
   if (db_result(db_query('SELECT 1 FROM {fundraiser_tracking} WHERE nid = %d', $form_nid))) {
    db_query('UPDATE {fundraiser_tracking} SET gateway_failures = gateway_failures + 1 WHERE nid = %d', $form_nid);
  }
  else {
    // This shouldn't happen.
    db_query('INSERT INTO {fundraiser_tracking} (nid, pageviews, conversions, local_failures, gateway_failures)
      VALUES (%d, 1, 0, 0, 1)', $form_nid);
  }

}

function fundraiser_track_conversion() {
   $form_nid = arg(1);
   if (db_result(db_query('SELECT 1 FROM {fundraiser_tracking} WHERE nid = %d', $form_nid))) {
    db_query('UPDATE {fundraiser_tracking} SET conversions = conversions + 1 WHERE nid = %d', $form_nid);
  }
  else {
    // This shouldn't happen.
    db_query('INSERT INTO {fundraiser_tracking} (nid, pageviews, conversions, local_failures, gateway_failures)
      VALUES (%d, 1, 1, 0, 0)', $form_nid);
  }

}

/**
 * Form helper function, required to get stylesheets and scripts added to the donation form after a validation error.
 * see: http://drupal.org/node/645880
 */
function _fundraiser_validation_includes($element, $form_state) {
   drupal_add_css(drupal_get_path('module', 'fundraiser') . '/fundraiser.css', 'module', 'all');
   drupal_add_js(drupal_get_path('module', 'fundraiser') . '/fundraiser_form.js', 'module', 'header', FALSE, FALSE, FALSE);
   return $element;
}



/**
 * Check if the given order was made on a payment gateway that supports refunds
 */
function fundraiser_gateway_can_refund_order($order) {
  // Get details on the original payment so we can load the payment gateway details
  $payment_details = db_fetch_object(db_query('SELECT gateway, txn_id FROM {fundraiser_webform_order} WHERE order_id = %d UNION SELECT gateway, txn_id FROM {fundraiser_recurring} WHERE order_id = %d', $order->order_id, $order->order_id));
  $payment_gateway = module_invoke_all('fundraiser_gateway', 'refund function', $payment_details->gateway);
  if ($payment_gateway['refund_function']) {
    return $payment_gateway['refund_function'];
  }
  return FALSE;
}

/**
 * Implementation of hook_token_list().
 */
function fundraiser_token_list($type = 'all') {
  if ($type == 'order' || $type == 'all') {
    $tokens['order']['order-cc-last-four']  = t('The last four digits of the credit card used for the order.');
    $tokens['order']['order-cc-card-exp-month'] = t('The credit card expiration month.');
    $tokens['order']['order-cc-card-exp-year'] = t('The credit card expiration year.');
    $tokens['order']['order-cc-card-type'] = t('The credit card type used for the order.');
  }
  return $tokens;
}

/**
 * Implementation of hook_token_values().
 */
function fundraiser_token_values($type, $object = NULL) {
  $values = array();
  switch ($type) {
    case 'order':
      $values['order-cc-last-four'] = substr($object->payment_details['cc_number'], -4); // support cc debug mode
      $values['order-cc-card-exp-month'] = $object->payment_details['cc_exp_month'];
      $values['order-cc-card-exp-year'] = $object->payment_details['cc_exp_year'];
      $values['order-cc-card-type'] = ucfirst($object->payment_details['cc_type']);
      break;
  }
  return $values;
}

/**
 * Checks if a confirmation page has been viewed.
 *
 * @param $sid
 * webform submission id
 *
 * @return
 * TRUE if the confirmation page has been viewed, otherwise FALSE.
 */
function fundraiser_secure_confirmation($sid) {
  return db_result(db_query('SELECT count(sid) FROM {fundraiser_secure} WHERE sid=%d', $sid)) ? TRUE : FALSE;
}

/**
 * Flag confirmation page as viewed.
 *
 * @param $sid
 * webform submission id
 */
function fundraiser_secure_confirmation_flag($sid) {
  if(!db_result(db_query('SELECT count(sid) FROM {fundraiser_secure} WHERE sid=%d', $sid))) {
    db_query('INSERT INTO {fundraiser_secure} (sid) VALUES (%s)', $sid);
  }
}
